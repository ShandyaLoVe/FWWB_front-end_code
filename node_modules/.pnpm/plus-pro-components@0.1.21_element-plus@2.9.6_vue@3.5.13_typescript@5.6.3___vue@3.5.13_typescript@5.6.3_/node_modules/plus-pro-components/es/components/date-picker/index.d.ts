import { GetDisabledHours, GetDisabledMinutes, GetDisabledSeconds } from 'element-plus/es/components/time-picker/src/props/shared';
import { IDatePickerType } from 'element-plus/es/components/date-picker/src/date-picker.type';
import { EpPropFinalized, EpPropMergeType } from 'element-plus/es/utils';
import { DatePickerProps, SingleOrRange, Options, DateModelType, ModelValueType } from 'element-plus';
import { DefineComponent, PropType, Ref, CreateComponentPublicInstance, ExtractPropTypes, Component, ComputedOptions, MethodOptions, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PublicProps } from 'vue';
import { default as DatePicker } from './src/index.vue';

export type PlusDatePickerInstance = InstanceType<typeof DatePicker>;
export type { PlusDatePickerProps } from './src/index.vue';
export declare const PlusDatePicker: DefineComponent<{
    type: {
        type: PropType<"date" | "year" | "month" | "dates" | "week" | "datetime">;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    valueFormat: {
        type: PropType<string>;
        default: string;
    };
    rangeSeparator: {
        type: PropType<string>;
        default: string;
    };
    startProps: {
        type: PropType<Partial< DatePickerProps>>;
        default: () => {};
    };
    endProps: {
        type: PropType<Partial< DatePickerProps>>;
        default: () => {};
    };
    startDisabledDate: {
        type: PropType<(startTime: Date, endValue: string) => boolean>;
        default: (startTime: any, endValue: any) => boolean;
    };
    endDisabledDate: {
        type: PropType<(endTime: Date, startValue: string) => boolean>;
        default: (endTime: any, startValue: any) => boolean;
    };
}, {
    startPickerInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, () => JSX.Element, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        readonly type: EpPropMergeType<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown>;
        readonly modelValue: EpPropMergeType<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown>;
        readonly popperClass: string;
        readonly label: string;
        readonly popperOptions: Partial< Options>;
        readonly disabled: boolean;
        readonly clearable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly name: EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>;
        readonly placeholder: string;
        readonly readonly: boolean;
        readonly prefixIcon: EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>;
        readonly tabindex: EpPropMergeType<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown>;
        readonly validateEvent: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly editable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly rangeSeparator: string;
        readonly shortcuts: unknown[];
        readonly arrowControl: boolean;
        readonly unlinkPanels: boolean;
        readonly isRange: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, () => JSX.Element, {}, {}, {}, {
        readonly type: EpPropMergeType<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown>;
        readonly modelValue: EpPropMergeType<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown>;
        readonly popperClass: string;
        readonly label: string;
        readonly popperOptions: Partial< Options>;
        readonly disabled: boolean;
        readonly clearable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly name: EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>;
        readonly placeholder: string;
        readonly readonly: boolean;
        readonly prefixIcon: EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>;
        readonly tabindex: EpPropMergeType<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown>;
        readonly validateEvent: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly editable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly rangeSeparator: string;
        readonly shortcuts: unknown[];
        readonly arrowControl: boolean;
        readonly unlinkPanels: boolean;
        readonly isRange: boolean;
    }> | null | undefined>;
    endPickerInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, () => JSX.Element, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        readonly type: EpPropMergeType<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown>;
        readonly modelValue: EpPropMergeType<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown>;
        readonly popperClass: string;
        readonly label: string;
        readonly popperOptions: Partial< Options>;
        readonly disabled: boolean;
        readonly clearable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly name: EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>;
        readonly placeholder: string;
        readonly readonly: boolean;
        readonly prefixIcon: EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>;
        readonly tabindex: EpPropMergeType<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown>;
        readonly validateEvent: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly editable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly rangeSeparator: string;
        readonly shortcuts: unknown[];
        readonly arrowControl: boolean;
        readonly unlinkPanels: boolean;
        readonly isRange: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly< ExtractPropTypes<{
        readonly type: EpPropFinalized<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown, "date", boolean>;
        readonly disabledDate: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly cellClassName: {
            readonly type: PropType<Function>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly shortcuts: EpPropFinalized<ArrayConstructor, unknown, unknown, () => never[], boolean>;
        readonly arrowControl: BooleanConstructor;
        readonly label: EpPropFinalized<StringConstructor, unknown, unknown, undefined, boolean>;
        readonly tabindex: EpPropFinalized<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown, 0, boolean>;
        readonly validateEvent: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly unlinkPanels: BooleanConstructor;
        readonly disabledHours: {
            readonly type: PropType<GetDisabledHours>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledMinutes: {
            readonly type: PropType<GetDisabledMinutes>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly disabledSeconds: {
            readonly type: PropType<GetDisabledSeconds>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly id: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly name: EpPropFinalized<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown, "", boolean>;
        readonly popperClass: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly format: StringConstructor;
        readonly valueFormat: StringConstructor;
        readonly dateFormat: StringConstructor;
        readonly timeFormat: StringConstructor;
        readonly clearable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly clearIcon: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly editable: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
        readonly prefixIcon: EpPropFinalized<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown, "", boolean>;
        readonly size: {
            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly readonly: BooleanConstructor;
        readonly disabled: BooleanConstructor;
        readonly placeholder: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
        readonly popperOptions: EpPropFinalized<(new (...args: any[]) => Partial< Options>) | (() => Partial< Options>) | ((new (...args: any[]) => Partial< Options>) | (() => Partial< Options>))[], unknown, unknown, () => {}, boolean>;
        readonly modelValue: EpPropFinalized<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown, "", boolean>;
        readonly rangeSeparator: EpPropFinalized<StringConstructor, unknown, unknown, "-", boolean>;
        readonly startPlaceholder: StringConstructor;
        readonly endPlaceholder: StringConstructor;
        readonly defaultValue: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly defaultTime: {
            readonly type: PropType<EpPropMergeType<(new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>) | ((new (...args: any[]) => Date | [Date, Date]) | (() => SingleOrRange<Date>))[], unknown, unknown>>;
            readonly required: false;
            readonly validator: ((val: unknown) => boolean) | undefined;
            __epPropKey: true;
        };
        readonly isRange: BooleanConstructor;
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, () => JSX.Element, {}, {}, {}, {
        readonly type: EpPropMergeType<(new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType) | ((new (...args: any[]) => "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange") | (() => IDatePickerType))[], unknown, unknown>;
        readonly modelValue: EpPropMergeType<(new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType) | ((new (...args: any[]) => string | number | Date | [ DateModelType, DateModelType]) | (() => ModelValueType))[], unknown, unknown>;
        readonly popperClass: string;
        readonly label: string;
        readonly popperOptions: Partial< Options>;
        readonly disabled: boolean;
        readonly clearable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly name: EpPropMergeType<(new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>) | ((new (...args: any[]) => string | [string, string]) | (() => SingleOrRange<string>))[], unknown, unknown>;
        readonly placeholder: string;
        readonly readonly: boolean;
        readonly prefixIcon: EpPropMergeType<(new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) | ((new (...args: any[]) => (string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>) & {}) | (() => string | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>))[], unknown, unknown>;
        readonly tabindex: EpPropMergeType<(new (...args: any[]) => string | number) | (() => string | number) | ((new (...args: any[]) => string | number) | (() => string | number))[], unknown, unknown>;
        readonly validateEvent: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly editable: EpPropMergeType<BooleanConstructor, unknown, unknown>;
        readonly rangeSeparator: string;
        readonly shortcuts: unknown[];
        readonly arrowControl: boolean;
        readonly unlinkPanels: boolean;
        readonly isRange: boolean;
    }> | null | undefined>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (value: string[]) => void;
    focus: (event: FocusEvent) => void;
    "update:modelValue": (value: string[]) => void;
}, string, PublicProps, Readonly< ExtractPropTypes<{
    type: {
        type: PropType<"date" | "year" | "month" | "dates" | "week" | "datetime">;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    valueFormat: {
        type: PropType<string>;
        default: string;
    };
    rangeSeparator: {
        type: PropType<string>;
        default: string;
    };
    startProps: {
        type: PropType<Partial< DatePickerProps>>;
        default: () => {};
    };
    endProps: {
        type: PropType<Partial< DatePickerProps>>;
        default: () => {};
    };
    startDisabledDate: {
        type: PropType<(startTime: Date, endValue: string) => boolean>;
        default: (startTime: any, endValue: any) => boolean;
    };
    endDisabledDate: {
        type: PropType<(endTime: Date, startValue: string) => boolean>;
        default: (endTime: any, startValue: any) => boolean;
    };
}>> & {
    onFocus?: ((event: FocusEvent) => any) | undefined;
    onChange?: ((value: string[]) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string[]) => any) | undefined;
}, {
    type: "date" | "year" | "month" | "dates" | "week" | "datetime";
    disabled: boolean;
    modelValue: string[];
    valueFormat: string;
    rangeSeparator: string;
    startProps: Partial< DatePickerProps>;
    endProps: Partial< DatePickerProps>;
    startDisabledDate: (startTime: Date, endValue: string) => boolean;
    endDisabledDate: (endTime: Date, startValue: string) => boolean;
}, {}>;
