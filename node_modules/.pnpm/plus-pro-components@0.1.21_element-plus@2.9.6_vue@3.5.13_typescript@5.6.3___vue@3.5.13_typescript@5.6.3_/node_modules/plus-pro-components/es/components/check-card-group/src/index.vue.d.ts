import { RenderTypes } from 'plus-pro-components';
import { DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { ComponentSize } from 'element-plus';
import { PlusCheckCardProps } from 'plus-pro-components/es/components/check-card';

export type ArrayValueType = (string | number)[];
export type SingleValueType = string | number;
export type ValueType = ArrayValueType | SingleValueType;
export interface PlusCheckCardGroupProps {
    modelValue?: ValueType;
    options?: (PlusCheckCardProps & {
        value: string | number;
    })[];
    size?: ComponentSize;
    disabled?: boolean;
    multiple?: boolean;
}
export interface PlusCheckCardGroupEmits {
    (e: 'update:modelValue', checked: ValueType): void;
    (e: 'change', checked: ValueType): void;
    (e: 'extra', item: PlusCheckCardProps & {
        value: string | number;
    }): void;
}
export interface CheckCardState {
    checkList: ArrayValueType;
    checked: SingleValueType;
}
declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusCheckCardGroupProps>, {
    modelValue: () => never[];
    options: () => never[];
    size: undefined;
    disabled: boolean;
    multiple: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "update:modelValue": (checked: ValueType) => void;
    change: (checked: ValueType) => void;
    extra: (item: PlusCheckCardProps & {
        value: string | number;
    }) => void;
}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusCheckCardGroupProps>, {
    modelValue: () => never[];
    options: () => never[];
    size: undefined;
    disabled: boolean;
    multiple: boolean;
}>>> & {
    onChange?: ((checked: ValueType) => any) | undefined;
    "onUpdate:modelValue"?: ((checked: ValueType) => any) | undefined;
    onExtra?: ((item: PlusCheckCardProps & {
        value: string | number;
    }) => any) | undefined;
}, {
    disabled: boolean;
    size: "" | "default" | "small" | "large";
    modelValue: ValueType;
    options: (PlusCheckCardProps & {
        value: string | number;
    })[];
    multiple: boolean;
}, {}>, Partial<Record<string, (_: {
    avatar: string | undefined;
    title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
}) => any>> & Partial<Record<string, (_: {
    title: string | undefined;
    avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
}) => any>> & Partial<Record<string, (_: {
    title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    description: string | undefined;
    avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
}) => any>> & Partial<Record<string, (_: {
    title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
}) => any>> & {
    avatar?(_: {
        avatar: string | undefined;
        title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    }): any;
    title?(_: {
        title: string | undefined;
        avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    }): any;
    description?(_: {
        title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        description: string | undefined;
        avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    }): any;
    extra?(_: {
        title: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        avatar: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        description: string | ((data: Pick<PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
