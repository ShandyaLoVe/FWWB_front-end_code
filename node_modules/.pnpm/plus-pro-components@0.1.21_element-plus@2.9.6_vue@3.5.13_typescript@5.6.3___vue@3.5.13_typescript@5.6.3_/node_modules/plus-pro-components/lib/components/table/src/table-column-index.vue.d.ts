import { TableColumnCtx } from 'element-plus';
import { CSSProperties, DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { PageInfo, RecordType } from 'plus-pro-components/es/types';

export interface PlusTableTableColumnIndexProps {
    pageInfo?: PageInfo;
    indexTableColumnProps?: Partial<TableColumnCtx<any>>;
    indexContentStyle?: Partial<CSSProperties> | ((row: RecordType, index: number) => Partial<CSSProperties>);
}
declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusTableTableColumnIndexProps>, {
    pageInfo: () => {
        page: number;
        pageSize: number;
    };
    indexContentStyle: () => {};
    indexTableColumnProps: () => {};
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusTableTableColumnIndexProps>, {
    pageInfo: () => {
        page: number;
        pageSize: number;
    };
    indexContentStyle: () => {};
    indexTableColumnProps: () => {};
}>>>, {
    indexTableColumnProps: Partial<TableColumnCtx<any>>;
    indexContentStyle: Partial<CSSProperties> | ((row: RecordType, index: number) => Partial<CSSProperties>);
    pageInfo: PageInfo;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
