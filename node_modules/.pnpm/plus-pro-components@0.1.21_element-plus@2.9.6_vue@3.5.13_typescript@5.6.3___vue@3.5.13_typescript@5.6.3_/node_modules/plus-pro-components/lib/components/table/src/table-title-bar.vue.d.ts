import { TitleBar, ColumnSetting } from './type';
import { ComponentSize } from 'element-plus/es/constants';
import { PlusColumn } from 'plus-pro-components/es/types';
import { ComputedRef, DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';

export interface PlusTableToolbarProps {
    columns?: PlusColumn[];
    titleBar?: boolean | Partial<TitleBar>;
    filterTableHeaderOverflowLabelLength?: number;
    defaultSize?: ComponentSize;
    columnsIsChange?: boolean;
}
export interface PlusTableToolbarEmits {
    (e: 'filterTable', columns: PlusColumn[]): void;
    (e: 'clickDensity', size: ComponentSize): void;
    (e: 'refresh'): void;
}
export interface State {
    checkList: string[];
    checkAll: boolean;
    isIndeterminate: boolean;
}
export interface ButtonNameDensity {
    size: ComponentSize;
    text: string | ComputedRef<string>;
}
declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusTableToolbarProps>, {
    columns: () => never[];
    titleBar: boolean;
    filterTableHeaderOverflowLabelLength: number;
    defaultSize: string;
    columnsIsChange: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    filterTable: (columns: PlusColumn[]) => void;
    clickDensity: (size: "" | "default" | "small" | "large") => void;
    refresh: () => void;
}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusTableToolbarProps>, {
    columns: () => never[];
    titleBar: boolean;
    filterTableHeaderOverflowLabelLength: number;
    defaultSize: string;
    columnsIsChange: boolean;
}>>> & {
    onRefresh?: (() => any) | undefined;
    onFilterTable?: ((columns: PlusColumn[]) => any) | undefined;
    onClickDensity?: ((size: "" | "default" | "small" | "large") => any) | undefined;
}, {
    columns: PlusColumn[];
    defaultSize: "" | "default" | "small" | "large";
    titleBar: boolean | Partial<Partial<{
        title?: string | undefined;
        refresh?: boolean | undefined;
        density?: boolean | undefined;
        columnSetting?: boolean | ColumnSetting | undefined;
        icon?: {
            size?: string | undefined;
            color?: string | undefined;
        } | undefined;
    }>>;
    filterTableHeaderOverflowLabelLength: number;
    columnsIsChange: boolean;
}, {}>, {
    title?(_: {}): any;
    toolbar?(_: {}): any;
    "refresh-icon"?(_: {}): any;
    "density-icon"?(_: {}): any;
    "drag-sort-icon"?(_: {}): any;
    "column-settings-icon"?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
