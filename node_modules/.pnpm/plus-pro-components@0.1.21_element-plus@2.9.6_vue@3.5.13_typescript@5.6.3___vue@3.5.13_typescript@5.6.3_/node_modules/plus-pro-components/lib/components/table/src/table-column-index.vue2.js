'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('../../../constants/index.js');
require('../../utils/index.js');
var elementPlus = require('element-plus');
var lodashEs = require('lodash-es');
var page = require('../../../constants/page.js');
var is = require('../../utils/is.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusTableTableColumnIndex"
  },
  __name: "table-column-index",
  props: {
    pageInfo: { default: () => ({ ...page.DefaultPageInfo }) },
    indexTableColumnProps: { default: () => ({}) },
    indexContentStyle: { type: [Object, Function], default: () => ({}) }
  },
  setup(__props) {
    var _a, _b, _c;
    const props = __props;
    const getTableIndex = lodashEs.isNumber((_a = props.indexTableColumnProps) == null ? void 0 : _a.index) ? vue.computed(() => {
      var _a2;
      return (_a2 = props.indexTableColumnProps) == null ? void 0 : _a2.index;
    }) : is.isFunction((_b = props.indexTableColumnProps) == null ? void 0 : _b.index) ? (_c = props.indexTableColumnProps) == null ? void 0 : _c.index : (index) => {
      var _a2, _b2;
      const i = ((((_a2 = props.pageInfo) == null ? void 0 : _a2.page) || page.DefaultPageInfo.page) - 1) * (((_b2 = props.pageInfo) == null ? void 0 : _b2.pageSize) || page.DefaultPageInfo.page) + index + 1;
      return +i;
    };
    const indexContentStyle = (row, index) => {
      if (is.isFunction(props.indexContentStyle)) {
        return props.indexContentStyle(
          row,
          index
        );
      } else if (is.isPlainObject(props.indexContentStyle)) {
        return props.indexContentStyle;
      } else {
        return {};
      }
    };
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElTableColumn), vue.mergeProps({
        key: "index",
        label: "#",
        fixed: "left",
        type: "index",
        "class-name": "plus-table-column-index",
        width: "60",
        align: "center",
        index: vue.unref(getTableIndex)
      }, _ctx.indexTableColumnProps), {
        default: vue.withCtx(({ row, $index }) => [
          vue.unref(is.isFunction)(vue.unref(getTableIndex)) ? (vue.openBlock(), vue.createElementBlock(
            "div",
            {
              key: 0,
              class: "plus-table-column-index__content",
              style: vue.normalizeStyle(indexContentStyle(row, $index))
            },
            vue.toDisplayString(vue.unref(getTableIndex)($index)),
            5
            /* TEXT, STYLE */
          )) : (vue.openBlock(), vue.createElementBlock(
            "div",
            {
              key: 1,
              class: "plus-table-column-index__content",
              style: vue.normalizeStyle(indexContentStyle(row, $index))
            },
            vue.toDisplayString(vue.unref(getTableIndex)),
            5
            /* TEXT, STYLE */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 16, ["index"]);
    };
  }
});

exports.default = _sfc_main;
