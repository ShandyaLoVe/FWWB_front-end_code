import { DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { PlusPaginationSelfProps } from './type';
import { PageInfo } from 'plus-pro-components/es/types';

declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusPaginationSelfProps>, {
    total: number;
    pageSizeList: () => number[];
    modelValue: () => {
        page: number;
        pageSize: number;
    };
    align: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "update:modelValue": (pageInfo: PageInfo) => void;
    change: (pageInfo: PageInfo) => void;
    "size-change": (value: number) => void;
    "current-change": (value: number) => void;
}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusPaginationSelfProps>, {
    total: number;
    pageSizeList: () => number[];
    modelValue: () => {
        page: number;
        pageSize: number;
    };
    align: string;
}>>> & {
    onChange?: ((pageInfo: PageInfo) => any) | undefined;
    "onCurrent-change"?: ((value: number) => any) | undefined;
    "onUpdate:modelValue"?: ((pageInfo: PageInfo) => any) | undefined;
    "onSize-change"?: ((value: number) => any) | undefined;
}, {
    align: "right" | "left";
    total: number;
    modelValue: PageInfo;
    pageSizeList: number[];
}, {}>, {
    "pagination-left"?(_: {}): any;
    "pagination-right"?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
