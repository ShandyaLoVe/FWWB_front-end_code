import { RenderTypes, RecordType } from 'plus-pro-components';
import { PlusCheckCardProps } from './src/index.vue';
import { CreateComponentPublicInstance, ExtractPropTypes, PropType, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ComponentOptionsBase } from 'vue';
export type { PlusCheckCardProps } from './src/index.vue';
export declare const PlusCheckCard: {
    new (...args: any[]): CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
        avatar: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        disabled: {
            type: PropType<boolean>;
            default: boolean;
        };
        extra: {
            type: PropType<(data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes>;
            default: undefined;
        };
        size: {
            type: PropType<"" | "default" | "small" | "large">;
            default: string;
        };
        title: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        modelValue: {
            type: PropType<boolean>;
            default: boolean;
        };
        description: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        avatarProps: {
            type: PropType<RecordType>;
            default: () => {};
        };
    }>> & {
        onChange?: ((checked: boolean) => any) | undefined;
        "onUpdate:modelValue"?: ((checked: boolean) => any) | undefined;
        onExtra?: (() => any) | undefined;
    }, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
        "update:modelValue": (checked: boolean) => void;
        change: (checked: boolean) => void;
        extra: () => void;
    }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
        avatar: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        disabled: {
            type: PropType<boolean>;
            default: boolean;
        };
        extra: {
            type: PropType<(data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes>;
            default: undefined;
        };
        size: {
            type: PropType<"" | "default" | "small" | "large">;
            default: string;
        };
        title: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        modelValue: {
            type: PropType<boolean>;
            default: boolean;
        };
        description: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        avatarProps: {
            type: PropType<RecordType>;
            default: () => {};
        };
    }>> & {
        onChange?: ((checked: boolean) => any) | undefined;
        "onUpdate:modelValue"?: ((checked: boolean) => any) | undefined;
        onExtra?: (() => any) | undefined;
    }, {
        avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        disabled: boolean;
        extra: (data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes;
        size: "" | "default" | "small" | "large";
        title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        modelValue: boolean;
        description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        avatarProps: RecordType;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly< ExtractPropTypes<{
        avatar: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        disabled: {
            type: PropType<boolean>;
            default: boolean;
        };
        extra: {
            type: PropType<(data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes>;
            default: undefined;
        };
        size: {
            type: PropType<"" | "default" | "small" | "large">;
            default: string;
        };
        title: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        modelValue: {
            type: PropType<boolean>;
            default: boolean;
        };
        description: {
            type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
            default: undefined;
        };
        avatarProps: {
            type: PropType<RecordType>;
            default: () => {};
        };
    }>> & {
        onChange?: ((checked: boolean) => any) | undefined;
        "onUpdate:modelValue"?: ((checked: boolean) => any) | undefined;
        onExtra?: (() => any) | undefined;
    }, {}, {}, {}, {}, {
        avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        disabled: boolean;
        extra: (data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes;
        size: "" | "default" | "small" | "large";
        title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        modelValue: boolean;
        description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
        avatarProps: RecordType;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & ComponentOptionsBase<Readonly< ExtractPropTypes<{
    avatar: {
        type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
        default: undefined;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    extra: {
        type: PropType<(data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes>;
        default: undefined;
    };
    size: {
        type: PropType<"" | "default" | "small" | "large">;
        default: string;
    };
    title: {
        type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
        default: undefined;
    };
    modelValue: {
        type: PropType<boolean>;
        default: boolean;
    };
    description: {
        type: PropType<string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes)>;
        default: undefined;
    };
    avatarProps: {
        type: PropType<RecordType>;
        default: () => {};
    };
}>> & {
    onChange?: ((checked: boolean) => any) | undefined;
    "onUpdate:modelValue"?: ((checked: boolean) => any) | undefined;
    onExtra?: (() => any) | undefined;
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "update:modelValue": (checked: boolean) => void;
    change: (checked: boolean) => void;
    extra: () => void;
}, string, {
    avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
    disabled: boolean;
    extra: (data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes;
    size: "" | "default" | "small" | "large";
    title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
    modelValue: boolean;
    description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes);
    avatarProps: RecordType;
}, {}, string, {}> & VNodeProps & AllowedComponentProps & ComponentCustomProps & (new () => {
    $slots: {
        avatar?(_: {
            avatar: string | undefined;
            title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
            description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        }): any;
        title?(_: {
            title: string | undefined;
            avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
            description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        }): any;
        extra?(_: {
            title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
            avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
            description: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        }): any;
        description?(_: {
            title: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
            description: string | undefined;
            avatar: string | ((data: Pick< PlusCheckCardProps, "avatar" | "title" | "description">) => RenderTypes) | undefined;
        }): any;
    };
});
