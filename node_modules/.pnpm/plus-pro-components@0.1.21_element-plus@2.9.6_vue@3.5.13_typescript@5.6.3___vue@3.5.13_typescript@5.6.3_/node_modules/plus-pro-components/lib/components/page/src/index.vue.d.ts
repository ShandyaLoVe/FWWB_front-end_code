import { DebouncedFunc } from 'lodash-es';
import { default as __DTS_DEFAULT_0__ } from 'element-plus/es/components/table/src/table-layout';
import { Options } from 'sortablejs';
import { TimeSelectProps } from 'element-plus/es/components/time-select/src/time-select';
import { LooseRequired } from '@vue/shared';
import { Arrayable, EpPropFinalized, EpPropMergeType } from 'element-plus/es/utils';
import { PlusFormGroupRow, PlusFormProps, PlusRadioProps, PlusDatePickerProps, PlusInputTagProps } from 'plus-pro-components';
import { DefineComponent, Ref, ComponentInternalInstance, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType, Slot, ComponentPublicInstance, ComponentOptionsBase, CreateComponentPublicInstance, ComputedRef, ComponentOptionsMixin, DebuggerEvent, nextTick, WatchOptions, WatchStopHandle, ShallowUnwrapRef, ComponentCustomProperties, CSSProperties, Component, ShallowRef, PublicProps } from 'vue';
import { CardProps, RowProps, ColProps, FormItemRule, FormItemProp, FormItemContext, FormValidateCallback, FormValidationResult, ElTooltipProps, TableColumnCtx, FormItemProps, ProgressFn, CascaderNode, InputAutoSize, AutocompleteProps, CheckboxGroupProps, ColorPickerProps, DatePickerProps, InputProps, InputNumberProps, RadioGroupProps, RateProps, ISelectProps, SliderProps, SwitchProps, TimePickerDefaultProps, TextProps, ImageProps, LinkProps, TagProps, ProgressProps, SummaryMethod, ColumnCls, ColumnStyle, CellCls, CellStyle, Sort, TreeNode, Translator, Table } from 'element-plus';
import { PlusPaginationProps } from 'plus-pro-components/es/components/pagination';
import { PlusTableProps, ActionBarProps, ColumnSetting, ButtonsCallBackParams, FormChangeCallBackParams, TableFormRefRow } from 'plus-pro-components/es/components/table';
import { PlusSearchProps } from 'plus-pro-components/es/components/search';
import { PlusColumn, PageInfo, RecordType, Mutable, FieldValues, TableValueType, FormItemValueType, OptionsType, OptionsRow, RenderTypes, FieldValueType, PropsItemType, OmitTypes, CascaderProps } from 'plus-pro-components/es/types';

export interface PlusPageProps {
    /**
     * 配置
     */
    columns: PlusColumn[];
    /**
     *
     * params参数中一定会有 pageSize 和  page ，这两个参数是 plus-pro-components 的规范
     * @param params
     */
    request: (params: Partial<PageInfo> & RecordType) => Promise<{
        /** 数据 */
        data: RecordType[];
        /** 不传会使用 data 的长度，如果是分页一定要传*/
        total: number;
    }>;
    /**
     * PlusSearchProps
     */
    search?: false | Partial<PlusSearchProps>;
    /**
     * PlusTableProps
     */
    table?: Partial<PlusTableProps>;
    /**
     * request的 params 其他参数，默认会带pageSize，page和 PlusSearch组件中的值
     */
    params?: RecordType;
    /**
     * 对通过 request 获取的数据进行处理
     * @param data
     */
    postData?: <T = RecordType[]>(data: T[]) => T[];
    /**
     * 搜索之前进行一些修改
     * @param params
     */
    beforeSearchSubmit?: <T = RecordType>(params: T) => T;
    /**
     *  表格和搜索是否需要el-card 包裹 默认true
     */
    isCard?: boolean;
    /**
     * 搜索外层的el-card的props ，当isCard为true时生效
     */
    searchCardProps?: Partial<Mutable<CardProps>>;
    /**
     *   表格外层的el-card的props ，当isCard为true时生效
     */
    tableCardProps?: Partial<Mutable<CardProps>>;
    defaultPageInfo?: PageInfo;
    defaultPageSizeList?: number[];
    pagination?: false | Omit<PlusPaginationProps, 'total' | 'modelValue' | 'pageSizeList'>;
    /**
     * 组件渲染完成后是否立即调用getList
     */
    immediate?: boolean;
    /**
     * 搜索与表格分割线
     */
    dividerProps?: false | Partial<RecordType>;
    /**
     * 可以修改默认的分页参数
     */
    pageInfoMap?: {
        page?: string;
        pageSize?: string;
    };
}
export interface PlusPageEmits {
    (e: 'search', data: FieldValues): void;
    (e: 'reset', data: FieldValues): void;
    (e: 'paginationChange', pageInfo: PageInfo): void;
    /**
     * 数据加载失败时触发
     */
    (e: 'requestError', error: unknown): void;
    /**
     * 数据加载完成时触发
     */
    (e: 'requestComplete', tableData: RecordType[]): void;
}
declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusPageProps>, {
    params: () => {};
    columns: () => never[];
    postData: undefined;
    beforeSearchSubmit: undefined;
    isCard: boolean;
    search: () => {};
    table: () => {};
    defaultPageInfo: () => {
        page: number;
        pageSize: number;
    };
    defaultPageSizeList: () => number[];
    searchCardProps: () => {};
    tableCardProps: () => {};
    /**
     * 分页组件的其他参数，不包含total，modelValue，pageSizeList
     */
    pagination: () => {};
    immediate: boolean;
    dividerProps: boolean;
    pageInfoMap: () => {
        page: string;
        pageSize: string;
    };
}>, {
    plusSearchInstance: Ref<({
        $: ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            columns: PlusColumn[];
            labelPosition: "top" | "right" | "left";
            inline: boolean;
            modelValue: FieldValues;
            showNumber: number;
            defaultValues: FieldValues;
            rowProps: Partial<Mutable< RowProps>>;
            colProps: Partial<Mutable< ColProps>>;
            hasFooter: boolean;
            hasReset: boolean;
            resetText: string;
            hasUnfold: boolean;
            searchText: string;
            retractText: string;
            expandText: string;
            searchLoading: boolean;
            needValidate: boolean;
        }> & Omit<{
            readonly columns: PlusColumn[];
            readonly inline: boolean;
            readonly modelValue: FieldValues;
            readonly showNumber: number;
            readonly defaultValues: FieldValues;
            readonly rowProps: Partial<Mutable< RowProps>>;
            readonly colProps: Partial<Mutable< ColProps>>;
            readonly hasFooter: boolean;
            readonly hasReset: boolean;
            readonly resetText: string;
            readonly hasUnfold: boolean;
            readonly searchText: string;
            readonly retractText: string;
            readonly expandText: string;
            readonly searchLoading: boolean;
            readonly needValidate: boolean;
            readonly labelPosition?: "top" | "right" | "left" | undefined;
            onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
            "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
            onReset?: ((values: FieldValues) => any) | undefined;
            onSearch?: ((values: FieldValues) => any) | undefined;
            onCollapse?: ((isShowUnfold: boolean) => any) | undefined;
        } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
            columns: {
                type: PropType<PlusColumn[]>;
                default: () => never[];
            };
            labelPosition: {
                type: PropType<"top" | "right" | "left">;
                default: undefined;
            };
            inline: {
                type: PropType<boolean>;
                default: boolean;
            };
            modelValue: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            showNumber: {
                type: PropType<number>;
                default: number;
            };
            defaultValues: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            rowProps: {
                type: PropType<Partial<Mutable< RowProps>>>;
                default: () => {
                    gutter: number;
                };
            };
            colProps: {
                type: PropType<Partial<Mutable< ColProps>>>;
                default: () => {
                    xs: number;
                    sm: number;
                    md: number;
                    lg: number;
                    xl: number; /** 渲染包裹层 */
                };
            };
            hasFooter: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasReset: {
                type: PropType<boolean>;
                default: boolean;
            };
            resetText: {
                type: PropType<string>;
                default: string;
            };
            hasUnfold: {
                type: PropType<boolean>;
                default: boolean;
            };
            searchText: {
                type: PropType<string>;
                default: string;
            };
            retractText: {
                type: PropType<string>;
                default: string;
            };
            expandText: {
                type: PropType<string>;
                default: string;
            };
            searchLoading: {
                type: PropType<boolean>;
                default: boolean;
            };
            needValidate: {
                type: PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
            "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
            onReset?: ((values: FieldValues) => any) | undefined;
            onSearch?: ((values: FieldValues) => any) | undefined;
            onCollapse?: ((isShowUnfold: boolean) => any) | undefined;
        }, "columns" | "labelPosition" | "inline" | "modelValue" | "showNumber" | "defaultValues" | "rowProps" | "colProps" | "hasFooter" | "hasReset" | "resetText" | "hasUnfold" | "searchText" | "retractText" | "expandText" | "searchLoading" | "needValidate">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: Slot<any> | undefined;
        }>;
        $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: ((event: "search", values: FieldValues) => void) & ((event: "reset", values: FieldValues) => void) & ((event: "update:modelValue", values: FieldValues) => void) & ((event: "change", values: FieldValues, column: PlusColumn) => void) & ((event: "collapse", isShowUnfold: boolean) => void);
        $el: any;
        $options: ComponentOptionsBase<Readonly< ExtractPropTypes<{
            columns: {
                type: PropType<PlusColumn[]>;
                default: () => never[];
            };
            labelPosition: {
                type: PropType<"top" | "right" | "left">;
                default: undefined;
            };
            inline: {
                type: PropType<boolean>;
                default: boolean;
            };
            modelValue: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            showNumber: {
                type: PropType<number>;
                default: number;
            };
            defaultValues: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            rowProps: {
                type: PropType<Partial<Mutable< RowProps>>>;
                default: () => {
                    gutter: number;
                };
            };
            colProps: {
                type: PropType<Partial<Mutable< ColProps>>>;
                default: () => {
                    xs: number;
                    sm: number;
                    md: number;
                    lg: number;
                    xl: number; /** 渲染包裹层 */
                };
            };
            hasFooter: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasReset: {
                type: PropType<boolean>;
                default: boolean;
            };
            resetText: {
                type: PropType<string>;
                default: string;
            };
            hasUnfold: {
                type: PropType<boolean>;
                default: boolean;
            };
            searchText: {
                type: PropType<string>;
                default: string;
            };
            retractText: {
                type: PropType<string>;
                default: string;
            };
            expandText: {
                type: PropType<string>;
                default: string;
            };
            searchLoading: {
                type: PropType<boolean>;
                default: boolean;
            };
            needValidate: {
                type: PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
            "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
            onReset?: ((values: FieldValues) => any) | undefined;
            onSearch?: ((values: FieldValues) => any) | undefined;
            onCollapse?: ((isShowUnfold: boolean) => any) | undefined;
        }, {
            plusFormInstance: Ref<({
                $: ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    columns: PlusColumn[];
                    group: false | PlusFormGroupRow[];
                    rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                    labelPosition: "top" | "right" | "left";
                    labelWidth: string | number;
                    labelSuffix: string;
                    hasLabel: boolean;
                    modelValue: FieldValues;
                    defaultValues: FieldValues;
                    rowProps: Partial<Mutable< RowProps>>;
                    colProps: Partial<Mutable< ColProps>>;
                    hasErrorTip: boolean;
                    hasFooter: boolean;
                    hasReset: boolean;
                    submitText: string;
                    resetText: string;
                    submitLoading: boolean;
                    footerAlign: "right" | "left" | "center";
                    cardProps: Partial<Mutable<CardProps>>;
                    prevent: boolean;
                    collapseDuration: number;
                    collapseTransition: boolean;
                    clearable: boolean;
                }> & Omit<{
                    readonly columns: PlusColumn[];
                    readonly group: false | PlusFormGroupRow[];
                    readonly rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                    readonly labelPosition: "top" | "right" | "left";
                    readonly labelWidth: string | number;
                    readonly labelSuffix: string;
                    readonly hasLabel: boolean;
                    readonly modelValue: FieldValues;
                    readonly defaultValues: FieldValues;
                    readonly rowProps: Partial<Mutable< RowProps>>;
                    readonly colProps: Partial<Mutable< ColProps>>;
                    readonly hasErrorTip: boolean;
                    readonly hasFooter: boolean;
                    readonly hasReset: boolean;
                    readonly submitText: string;
                    readonly resetText: string;
                    readonly submitLoading: boolean;
                    readonly footerAlign: "right" | "left" | "center";
                    readonly cardProps: Partial<Mutable<CardProps>>;
                    readonly prevent: boolean;
                    readonly clearable: boolean;
                    readonly collapseDuration?: number | undefined;
                    readonly collapseTransition?: boolean | undefined;
                    onValidate?: ((...args: any[]) => any) | undefined;
                    onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                    "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                    onSubmit?: ((values: FieldValues) => any) | undefined;
                    onReset?: ((values: FieldValues) => any) | undefined;
                    onSubmitError?: ((errors: unknown) => any) | undefined;
                } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                    columns: {
                        type: PropType<PlusColumn[]>;
                        default: () => never[];
                    };
                    group: {
                        type: PropType<false | PlusFormGroupRow[]>;
                        default: boolean;
                    };
                    rules: {
                        type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        default: () => {};
                    };
                    labelPosition: {
                        type: PropType<"top" | "right" | "left">;
                        default: string;
                    };
                    labelWidth: {
                        type: PropType<string | number>;
                        default: string;
                    };
                    labelSuffix: {
                        type: PropType<string>;
                        default: string;
                    };
                    hasLabel: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    modelValue: {
                        type: PropType<FieldValues>;
                        default: () => {};
                    };
                    defaultValues: {
                        type: PropType<FieldValues>;
                        default: () => {};
                    };
                    rowProps: {
                        type: PropType<Partial<Mutable< RowProps>>>;
                        default: () => {};
                    };
                    colProps: {
                        type: PropType<Partial<Mutable< ColProps>>>;
                        default: () => {};
                    };
                    hasErrorTip: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    hasFooter: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    hasReset: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    submitText: {
                        type: PropType<string>;
                        default: string;
                    };
                    resetText: {
                        type: PropType<string>;
                        default: string;
                    };
                    submitLoading: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    footerAlign: {
                        type: PropType<"right" | "left" | "center">;
                        default: string;
                    };
                    cardProps: {
                        type: PropType<Partial<Mutable<CardProps>>>;
                        default: () => {};
                    };
                    prevent: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    collapseDuration: {
                        type: PropType<number>;
                        default: undefined;
                    };
                    collapseTransition: {
                        type: PropType<boolean>;
                        default: undefined;
                    };
                    clearable: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                }>> & {
                    onValidate?: ((...args: any[]) => any) | undefined;
                    onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                    "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                    onSubmit?: ((values: FieldValues) => any) | undefined;
                    onReset?: ((values: FieldValues) => any) | undefined;
                    onSubmitError?: ((errors: unknown) => any) | undefined;
                }, "columns" | "group" | "rules" | "labelPosition" | "labelWidth" | "labelSuffix" | "hasLabel" | "modelValue" | "defaultValues" | "rowProps" | "colProps" | "hasErrorTip" | "hasFooter" | "hasReset" | "submitText" | "resetText" | "submitLoading" | "footerAlign" | "cardProps" | "prevent" | "collapseDuration" | "collapseTransition" | "clearable">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: Slot<any> | undefined;
                }>;
                $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
                $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
                $emit: ((event: "reset", values: FieldValues) => void) & ((event: "submit", values: FieldValues) => void) & ((event: "validate", ...args: any[]) => void) & ((event: "update:modelValue", values: FieldValues) => void) & ((event: "change", values: FieldValues, column: PlusColumn) => void) & ((event: "submitError", errors: unknown) => void);
                $el: any;
                $options: ComponentOptionsBase<Readonly< ExtractPropTypes<{
                    columns: {
                        type: PropType<PlusColumn[]>;
                        default: () => never[];
                    };
                    group: {
                        type: PropType<false | PlusFormGroupRow[]>;
                        default: boolean;
                    };
                    rules: {
                        type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        default: () => {};
                    };
                    labelPosition: {
                        type: PropType<"top" | "right" | "left">;
                        default: string;
                    };
                    labelWidth: {
                        type: PropType<string | number>;
                        default: string;
                    };
                    labelSuffix: {
                        type: PropType<string>;
                        default: string;
                    };
                    hasLabel: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    modelValue: {
                        type: PropType<FieldValues>;
                        default: () => {};
                    };
                    defaultValues: {
                        type: PropType<FieldValues>;
                        default: () => {};
                    };
                    rowProps: {
                        type: PropType<Partial<Mutable< RowProps>>>;
                        default: () => {};
                    };
                    colProps: {
                        type: PropType<Partial<Mutable< ColProps>>>;
                        default: () => {};
                    };
                    hasErrorTip: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    hasFooter: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    hasReset: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    submitText: {
                        type: PropType<string>;
                        default: string;
                    };
                    resetText: {
                        type: PropType<string>;
                        default: string;
                    };
                    submitLoading: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    footerAlign: {
                        type: PropType<"right" | "left" | "center">;
                        default: string;
                    };
                    cardProps: {
                        type: PropType<Partial<Mutable<CardProps>>>;
                        default: () => {};
                    };
                    prevent: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                    collapseDuration: {
                        type: PropType<number>;
                        default: undefined;
                    };
                    collapseTransition: {
                        type: PropType<boolean>;
                        default: undefined;
                    };
                    clearable: {
                        type: PropType<boolean>;
                        default: boolean;
                    };
                }>> & {
                    onValidate?: ((...args: any[]) => any) | undefined;
                    onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                    "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                    onSubmit?: ((values: FieldValues) => any) | undefined;
                    onReset?: ((values: FieldValues) => any) | undefined;
                    onSubmitError?: ((errors: unknown) => any) | undefined;
                }, {
                    formInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }, {
                        /**
                         * 搜索与表格分割线
                         */
                        COMPONENT_NAME: string;
                        props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                            readonly model: ObjectConstructor;
                            readonly rules: {
                                readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                            readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                            readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                            readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                            readonly inline: BooleanConstructor;
                            readonly inlineMessage: BooleanConstructor;
                            readonly statusIcon: BooleanConstructor;
                            readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                            readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                            readonly hideRequiredAsterisk: BooleanConstructor;
                            readonly scrollToError: BooleanConstructor;
                            readonly scrollIntoViewOptions: {
                                readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly size: {
                                readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly disabled: BooleanConstructor;
                        }>> & {
                            onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                        }>>;
                        emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                        fields: FormItemContext[];
                        formSize: ComputedRef<"" | "default" | "small" | "large">;
                        ns: {
                            namespace: ComputedRef<string>;
                            b: (blockSuffix?: string | undefined) => string;
                            e: (element?: string | undefined) => string;
                            m: (modifier?: string | undefined) => string;
                            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                            em: (element?: string | undefined, modifier?: string | undefined) => string;
                            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                            is: {
                                (name: string, state: boolean | undefined): string;
                                (name: string): string;
                            };
                            cssVar: (object: Record<string, string>) => Record<string, string>;
                            cssVarName: (name: string) => string;
                            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                            cssVarBlockName: (name: string) => string;
                        };
                        formClasses: ComputedRef<(string | {
                            [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                        })[]>;
                        getField: (prop: string) => FormItemContext | undefined;
                        addField: (field: FormItemContext) => void;
                        removeField: (field: FormItemContext) => void;
                        resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                        clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                        isValidatable: ComputedRef<boolean>;
                        obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                        validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                        doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                        validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                        scrollToField: (prop: FormItemProp) => void;
                    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                        validate: (prop: FormItemProp, isValid: boolean, message: string) => boolean;
                    }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }, {
                        readonly disabled: boolean;
                        readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                        readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                        readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                        readonly labelSuffix: string;
                        readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                        readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                        readonly inline: boolean;
                        readonly inlineMessage: boolean;
                        readonly statusIcon: boolean;
                        readonly hideRequiredAsterisk: boolean;
                        readonly scrollToError: boolean;
                    }, true, {}, {}, {
                        P: {};
                        B: {};
                        D: {};
                        C: {};
                        M: {};
                        Defaults: {};
                    }, Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }, {
                        /**
                         * 搜索与表格分割线
                         */
                        COMPONENT_NAME: string;
                        props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                            readonly model: ObjectConstructor;
                            readonly rules: {
                                readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                            readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                            readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                            readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                            readonly inline: BooleanConstructor;
                            readonly inlineMessage: BooleanConstructor;
                            readonly statusIcon: BooleanConstructor;
                            readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                            readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                            readonly hideRequiredAsterisk: BooleanConstructor;
                            readonly scrollToError: BooleanConstructor;
                            readonly scrollIntoViewOptions: {
                                readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly size: {
                                readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                                readonly required: false;
                                readonly validator: ((val: unknown) => boolean) | undefined;
                                __epPropKey: true;
                            };
                            readonly disabled: BooleanConstructor;
                        }>> & {
                            onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                        }>>;
                        emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                        fields: FormItemContext[];
                        formSize: ComputedRef<"" | "default" | "small" | "large">;
                        ns: {
                            namespace: ComputedRef<string>;
                            b: (blockSuffix?: string | undefined) => string;
                            e: (element?: string | undefined) => string;
                            m: (modifier?: string | undefined) => string;
                            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                            em: (element?: string | undefined, modifier?: string | undefined) => string;
                            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                            is: {
                                (name: string, state: boolean | undefined): string;
                                (name: string): string;
                            };
                            cssVar: (object: Record<string, string>) => Record<string, string>;
                            cssVarName: (name: string) => string;
                            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                            cssVarBlockName: (name: string) => string;
                        };
                        formClasses: ComputedRef<(string | {
                            [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                        })[]>;
                        getField: (prop: string) => FormItemContext | undefined;
                        addField: (field: FormItemContext) => void;
                        removeField: (field: FormItemContext) => void;
                        resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                        clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                        isValidatable: ComputedRef<boolean>;
                        obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                        validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                        doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                        validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                        scrollToField: (prop: FormItemProp) => void;
                    }, {}, {}, {}, {
                        readonly disabled: boolean;
                        readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                        readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                        readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                        readonly labelSuffix: string;
                        readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                        readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                        readonly inline: boolean;
                        readonly inlineMessage: boolean;
                        readonly statusIcon: boolean;
                        readonly hideRequiredAsterisk: boolean;
                        readonly scrollToError: boolean;
                    }> | null>;
                    handleSubmit: () => Promise<boolean>;
                    handleReset: () => void;
                }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                    "update:modelValue": (values: FieldValues) => void;
                    submit: (values: FieldValues) => void;
                    change: (values: FieldValues, column: PlusColumn) => void;
                    reset: (values: FieldValues) => void;
                    submitError: (errors: unknown) => void;
                    validate: (...args: any[]) => void;
                }, string, {
                    columns: PlusColumn[];
                    group: false | PlusFormGroupRow[];
                    rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                    labelPosition: "top" | "right" | "left";
                    labelWidth: string | number;
                    labelSuffix: string;
                    hasLabel: boolean;
                    modelValue: FieldValues;
                    defaultValues: FieldValues;
                    rowProps: Partial<Mutable< RowProps>>;
                    colProps: Partial<Mutable< ColProps>>;
                    hasErrorTip: boolean;
                    hasFooter: boolean;
                    hasReset: boolean;
                    submitText: string;
                    resetText: string;
                    submitLoading: boolean;
                    footerAlign: "right" | "left" | "center";
                    cardProps: Partial<Mutable<CardProps>>;
                    prevent: boolean;
                    collapseDuration: number;
                    collapseTransition: boolean;
                    clearable: boolean;
                }, {}, string, {}> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: nextTick;
                $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle;
            } & Omit<Readonly< ExtractPropTypes<{
                columns: {
                    type: PropType<PlusColumn[]>;
                    default: () => never[];
                };
                group: {
                    type: PropType<false | PlusFormGroupRow[]>;
                    default: boolean;
                };
                rules: {
                    type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    default: () => {};
                };
                labelPosition: {
                    type: PropType<"top" | "right" | "left">;
                    default: string;
                };
                labelWidth: {
                    type: PropType<string | number>;
                    default: string;
                };
                labelSuffix: {
                    type: PropType<string>;
                    default: string;
                };
                hasLabel: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                modelValue: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                defaultValues: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                rowProps: {
                    type: PropType<Partial<Mutable< RowProps>>>;
                    default: () => {};
                };
                colProps: {
                    type: PropType<Partial<Mutable< ColProps>>>;
                    default: () => {};
                };
                hasErrorTip: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasFooter: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasReset: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                submitText: {
                    type: PropType<string>;
                    default: string;
                };
                resetText: {
                    type: PropType<string>;
                    default: string;
                };
                submitLoading: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                footerAlign: {
                    type: PropType<"right" | "left" | "center">;
                    default: string;
                };
                cardProps: {
                    type: PropType<Partial<Mutable<CardProps>>>;
                    default: () => {};
                };
                prevent: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                collapseDuration: {
                    type: PropType<number>;
                    default: undefined;
                };
                collapseTransition: {
                    type: PropType<boolean>;
                    default: undefined;
                };
                clearable: {
                    type: PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                onValidate?: ((...args: any[]) => any) | undefined;
                onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                onSubmit?: ((values: FieldValues) => any) | undefined;
                onReset?: ((values: FieldValues) => any) | undefined;
                onSubmitError?: ((errors: unknown) => any) | undefined;
            }, "formInstance" | "handleSubmit" | "handleReset"> & ShallowUnwrapRef<{
                formInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    /**
                     * 搜索与表格分割线
                     */
                    COMPONENT_NAME: string;
                    props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }>>;
                    emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                    fields: FormItemContext[];
                    formSize: ComputedRef<"" | "default" | "small" | "large">;
                    ns: {
                        namespace: ComputedRef<string>;
                        b: (blockSuffix?: string | undefined) => string;
                        e: (element?: string | undefined) => string;
                        m: (modifier?: string | undefined) => string;
                        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                        em: (element?: string | undefined, modifier?: string | undefined) => string;
                        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                        is: {
                            (name: string, state: boolean | undefined): string;
                            (name: string): string;
                        };
                        cssVar: (object: Record<string, string>) => Record<string, string>;
                        cssVarName: (name: string) => string;
                        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                        cssVarBlockName: (name: string) => string;
                    };
                    formClasses: ComputedRef<(string | {
                        [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    })[]>;
                    getField: (prop: string) => FormItemContext | undefined;
                    addField: (field: FormItemContext) => void;
                    removeField: (field: FormItemContext) => void;
                    resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                    clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                    isValidatable: ComputedRef<boolean>;
                    obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                    validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                    doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                    validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                    scrollToField: (prop: FormItemProp) => void;
                }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                    validate: (prop: FormItemProp, isValid: boolean, message: string) => boolean;
                }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    readonly disabled: boolean;
                    readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                    readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                    readonly labelSuffix: string;
                    readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly inline: boolean;
                    readonly inlineMessage: boolean;
                    readonly statusIcon: boolean;
                    readonly hideRequiredAsterisk: boolean;
                    readonly scrollToError: boolean;
                }, true, {}, {}, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    /**
                     * 搜索与表格分割线
                     */
                    COMPONENT_NAME: string;
                    props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }>>;
                    emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                    fields: FormItemContext[];
                    formSize: ComputedRef<"" | "default" | "small" | "large">;
                    ns: {
                        namespace: ComputedRef<string>;
                        b: (blockSuffix?: string | undefined) => string;
                        e: (element?: string | undefined) => string;
                        m: (modifier?: string | undefined) => string;
                        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                        em: (element?: string | undefined, modifier?: string | undefined) => string;
                        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                        is: {
                            (name: string, state: boolean | undefined): string;
                            (name: string): string;
                        };
                        cssVar: (object: Record<string, string>) => Record<string, string>;
                        cssVarName: (name: string) => string;
                        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                        cssVarBlockName: (name: string) => string;
                    };
                    formClasses: ComputedRef<(string | {
                        [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    })[]>;
                    getField: (prop: string) => FormItemContext | undefined;
                    addField: (field: FormItemContext) => void;
                    removeField: (field: FormItemContext) => void;
                    resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                    clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                    isValidatable: ComputedRef<boolean>;
                    obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                    validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                    doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                    validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                    scrollToField: (prop: FormItemProp) => void;
                }, {}, {}, {}, {
                    readonly disabled: boolean;
                    readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                    readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                    readonly labelSuffix: string;
                    readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly inline: boolean;
                    readonly inlineMessage: boolean;
                    readonly statusIcon: boolean;
                    readonly hideRequiredAsterisk: boolean;
                    readonly scrollToError: boolean;
                }> | null>;
                handleSubmit: () => Promise<boolean>;
                handleReset: () => void;
            }> & {} & ComponentCustomProperties & {} & {
                $slots: Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                    [x: string]: any;
                    label?: string | ComputedRef<string> | undefined;
                    prop: string;
                    width?: string | number | undefined;
                    minWidth?: string | number | undefined;
                    editable?: boolean | undefined;
                    valueType?: TableValueType | FormItemValueType;
                    hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    descriptionsItemProps?: RecordType | undefined;
                    options?: OptionsType | undefined;
                    optionsMap?: {
                        label?: string | undefined;
                        value?: string | undefined;
                    } | undefined;
                    customGetStatus?: ((data: {
                        options: OptionsRow<undefined>[];
                        value: string | number;
                        row: RecordType;
                    }) => OptionsRow<undefined>) | undefined;
                    tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                    render?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => RenderTypes) | undefined;
                    renderHTML?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string) | undefined;
                    renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderDescriptionsItem?: ((data: {
                        value: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    renderDescriptionsLabel?: ((data: {
                        label: string;
                        column: PlusColumn;
                        row: RecordType;
                    }) => RenderTypes) | undefined;
                    order?: number | ComputedRef<number> | undefined;
                    children?: PlusColumn[] | undefined;
                    headerFilter?: boolean | undefined;
                    disabledHeaderFilter?: boolean | undefined;
                    tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                        [key: string]: any;
                    }> | undefined;
                    preview?: boolean | undefined;
                    linkText?: string | undefined;
                    formatter?: ((value: any, data: {
                        row: RecordType;
                        column: PlusColumn;
                        index: number;
                    }) => string | number) | undefined;
                    formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                        row: Record<string, any>;
                        index: number;
                    }) => Partial< PlusFormProps>) | undefined;
                    formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    fieldProps?: PropsItemType<Partial<{
                        [key: string]: any;
                        style: CSSProperties;
                        rows: number;
                        autocomplete: string;
                        type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                        loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                        step: string | number;
                        format: string | ProgressFn | undefined;
                        filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                        id: string | [string, string];
                        effect: string;
                        height: string | number;
                        autosize: InputAutoSize;
                    } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                    renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                    colProps?: Partial<Mutable< ColProps> & {
                        [key: string]: any;
                        style?: CSSProperties | undefined;
                    }> | undefined;
                    hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                    renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                    renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                    fieldSlots?: {
                        [slotName: string]: (data?: any) => RenderTypes;
                    } | undefined;
                    fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
                }) => any>> & {
                    default?(_: {}): any;
                    "group-header"?(_: {
                        title: string;
                        columns: PlusColumn[];
                        icon: Component | undefined;
                        index: number;
                    }): any;
                    "tooltip-icon"?(_: {}): any;
                    "search-footer"?(_: {}): any;
                    footer?(_: {
                        handleReset: () => void;
                        handleSubmit: () => Promise<boolean>;
                    }): any;
                };
            }) | null | undefined>;
            handleReset: () => void;
            handleSearch: () => void;
            handleUnfold: (e: MouseEvent) => void;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
            "update:modelValue": (values: FieldValues) => void;
            search: (values: FieldValues) => void;
            change: (values: FieldValues, column: PlusColumn) => void;
            reset: (values: FieldValues) => void;
            collapse: (isShowUnfold: boolean) => void;
        }, string, {
            columns: PlusColumn[];
            labelPosition: "top" | "right" | "left";
            inline: boolean;
            modelValue: FieldValues;
            showNumber: number;
            defaultValues: FieldValues;
            rowProps: Partial<Mutable< RowProps>>;
            colProps: Partial<Mutable< ColProps>>;
            hasFooter: boolean;
            hasReset: boolean;
            resetText: string;
            hasUnfold: boolean;
            searchText: string;
            retractText: string;
            expandText: string;
            searchLoading: boolean;
            needValidate: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle;
    } & Omit<Readonly< ExtractPropTypes<{
        columns: {
            type: PropType<PlusColumn[]>;
            default: () => never[];
        };
        labelPosition: {
            type: PropType<"top" | "right" | "left">;
            default: undefined;
        };
        inline: {
            type: PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: PropType<FieldValues>;
            default: () => {};
        };
        showNumber: {
            type: PropType<number>;
            default: number;
        };
        defaultValues: {
            type: PropType<FieldValues>;
            default: () => {};
        };
        rowProps: {
            type: PropType<Partial<Mutable< RowProps>>>;
            default: () => {
                gutter: number;
            };
        };
        colProps: {
            type: PropType<Partial<Mutable< ColProps>>>;
            default: () => {
                xs: number;
                sm: number;
                md: number;
                lg: number;
                xl: number; /** 渲染包裹层 */
            };
        };
        hasFooter: {
            type: PropType<boolean>;
            default: boolean;
        };
        hasReset: {
            type: PropType<boolean>;
            default: boolean;
        };
        resetText: {
            type: PropType<string>;
            default: string;
        };
        hasUnfold: {
            type: PropType<boolean>;
            default: boolean;
        };
        searchText: {
            type: PropType<string>;
            default: string;
        };
        retractText: {
            type: PropType<string>;
            default: string;
        };
        expandText: {
            type: PropType<string>;
            default: string;
        };
        searchLoading: {
            type: PropType<boolean>;
            default: boolean;
        };
        needValidate: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
        "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
        onReset?: ((values: FieldValues) => any) | undefined;
        onSearch?: ((values: FieldValues) => any) | undefined;
        onCollapse?: ((isShowUnfold: boolean) => any) | undefined;
    }, "handleReset" | "plusFormInstance" | "handleSearch" | "handleUnfold"> & ShallowUnwrapRef<{
        plusFormInstance: Ref<({
            $: ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                columns: PlusColumn[];
                group: false | PlusFormGroupRow[];
                rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                labelPosition: "top" | "right" | "left";
                labelWidth: string | number;
                labelSuffix: string;
                hasLabel: boolean;
                modelValue: FieldValues;
                defaultValues: FieldValues;
                rowProps: Partial<Mutable< RowProps>>;
                colProps: Partial<Mutable< ColProps>>;
                hasErrorTip: boolean;
                hasFooter: boolean;
                hasReset: boolean;
                submitText: string;
                resetText: string;
                submitLoading: boolean;
                footerAlign: "right" | "left" | "center";
                cardProps: Partial<Mutable<CardProps>>;
                prevent: boolean;
                collapseDuration: number;
                collapseTransition: boolean;
                clearable: boolean;
            }> & Omit<{
                readonly columns: PlusColumn[];
                readonly group: false | PlusFormGroupRow[];
                readonly rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                readonly labelPosition: "top" | "right" | "left";
                readonly labelWidth: string | number;
                readonly labelSuffix: string;
                readonly hasLabel: boolean;
                readonly modelValue: FieldValues;
                readonly defaultValues: FieldValues;
                readonly rowProps: Partial<Mutable< RowProps>>;
                readonly colProps: Partial<Mutable< ColProps>>;
                readonly hasErrorTip: boolean;
                readonly hasFooter: boolean;
                readonly hasReset: boolean;
                readonly submitText: string;
                readonly resetText: string;
                readonly submitLoading: boolean;
                readonly footerAlign: "right" | "left" | "center";
                readonly cardProps: Partial<Mutable<CardProps>>;
                readonly prevent: boolean;
                readonly clearable: boolean;
                readonly collapseDuration?: number | undefined;
                readonly collapseTransition?: boolean | undefined;
                onValidate?: ((...args: any[]) => any) | undefined;
                onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                onSubmit?: ((values: FieldValues) => any) | undefined;
                onReset?: ((values: FieldValues) => any) | undefined;
                onSubmitError?: ((errors: unknown) => any) | undefined;
            } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                columns: {
                    type: PropType<PlusColumn[]>;
                    default: () => never[];
                };
                group: {
                    type: PropType<false | PlusFormGroupRow[]>;
                    default: boolean;
                };
                rules: {
                    type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    default: () => {};
                };
                labelPosition: {
                    type: PropType<"top" | "right" | "left">;
                    default: string;
                };
                labelWidth: {
                    type: PropType<string | number>;
                    default: string;
                };
                labelSuffix: {
                    type: PropType<string>;
                    default: string;
                };
                hasLabel: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                modelValue: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                defaultValues: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                rowProps: {
                    type: PropType<Partial<Mutable< RowProps>>>;
                    default: () => {};
                };
                colProps: {
                    type: PropType<Partial<Mutable< ColProps>>>;
                    default: () => {};
                };
                hasErrorTip: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasFooter: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasReset: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                submitText: {
                    type: PropType<string>;
                    default: string;
                };
                resetText: {
                    type: PropType<string>;
                    default: string;
                };
                submitLoading: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                footerAlign: {
                    type: PropType<"right" | "left" | "center">;
                    default: string;
                };
                cardProps: {
                    type: PropType<Partial<Mutable<CardProps>>>;
                    default: () => {};
                };
                prevent: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                collapseDuration: {
                    type: PropType<number>;
                    default: undefined;
                };
                collapseTransition: {
                    type: PropType<boolean>;
                    default: undefined;
                };
                clearable: {
                    type: PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                onValidate?: ((...args: any[]) => any) | undefined;
                onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                onSubmit?: ((values: FieldValues) => any) | undefined;
                onReset?: ((values: FieldValues) => any) | undefined;
                onSubmitError?: ((errors: unknown) => any) | undefined;
            }, "columns" | "group" | "rules" | "labelPosition" | "labelWidth" | "labelSuffix" | "hasLabel" | "modelValue" | "defaultValues" | "rowProps" | "colProps" | "hasErrorTip" | "hasFooter" | "hasReset" | "submitText" | "resetText" | "submitLoading" | "footerAlign" | "cardProps" | "prevent" | "collapseDuration" | "collapseTransition" | "clearable">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: Slot<any> | undefined;
            }>;
            $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $emit: ((event: "reset", values: FieldValues) => void) & ((event: "submit", values: FieldValues) => void) & ((event: "validate", ...args: any[]) => void) & ((event: "update:modelValue", values: FieldValues) => void) & ((event: "change", values: FieldValues, column: PlusColumn) => void) & ((event: "submitError", errors: unknown) => void);
            $el: any;
            $options: ComponentOptionsBase<Readonly< ExtractPropTypes<{
                columns: {
                    type: PropType<PlusColumn[]>;
                    default: () => never[];
                };
                group: {
                    type: PropType<false | PlusFormGroupRow[]>;
                    default: boolean;
                };
                rules: {
                    type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    default: () => {};
                };
                labelPosition: {
                    type: PropType<"top" | "right" | "left">;
                    default: string;
                };
                labelWidth: {
                    type: PropType<string | number>;
                    default: string;
                };
                labelSuffix: {
                    type: PropType<string>;
                    default: string;
                };
                hasLabel: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                modelValue: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                defaultValues: {
                    type: PropType<FieldValues>;
                    default: () => {};
                };
                rowProps: {
                    type: PropType<Partial<Mutable< RowProps>>>;
                    default: () => {};
                };
                colProps: {
                    type: PropType<Partial<Mutable< ColProps>>>;
                    default: () => {};
                };
                hasErrorTip: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasFooter: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                hasReset: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                submitText: {
                    type: PropType<string>;
                    default: string;
                };
                resetText: {
                    type: PropType<string>;
                    default: string;
                };
                submitLoading: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                footerAlign: {
                    type: PropType<"right" | "left" | "center">;
                    default: string;
                };
                cardProps: {
                    type: PropType<Partial<Mutable<CardProps>>>;
                    default: () => {};
                };
                prevent: {
                    type: PropType<boolean>;
                    default: boolean;
                };
                collapseDuration: {
                    type: PropType<number>;
                    default: undefined;
                };
                collapseTransition: {
                    type: PropType<boolean>;
                    default: undefined;
                };
                clearable: {
                    type: PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                onValidate?: ((...args: any[]) => any) | undefined;
                onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
                "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
                onSubmit?: ((values: FieldValues) => any) | undefined;
                onReset?: ((values: FieldValues) => any) | undefined;
                onSubmitError?: ((errors: unknown) => any) | undefined;
            }, {
                formInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    /**
                     * 搜索与表格分割线
                     */
                    COMPONENT_NAME: string;
                    props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }>>;
                    emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                    fields: FormItemContext[];
                    formSize: ComputedRef<"" | "default" | "small" | "large">;
                    ns: {
                        namespace: ComputedRef<string>;
                        b: (blockSuffix?: string | undefined) => string;
                        e: (element?: string | undefined) => string;
                        m: (modifier?: string | undefined) => string;
                        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                        em: (element?: string | undefined, modifier?: string | undefined) => string;
                        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                        is: {
                            (name: string, state: boolean | undefined): string;
                            (name: string): string;
                        };
                        cssVar: (object: Record<string, string>) => Record<string, string>;
                        cssVarName: (name: string) => string;
                        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                        cssVarBlockName: (name: string) => string;
                    };
                    formClasses: ComputedRef<(string | {
                        [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    })[]>;
                    getField: (prop: string) => FormItemContext | undefined;
                    addField: (field: FormItemContext) => void;
                    removeField: (field: FormItemContext) => void;
                    resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                    clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                    isValidatable: ComputedRef<boolean>;
                    obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                    validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                    doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                    validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                    scrollToField: (prop: FormItemProp) => void;
                }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                    validate: (prop: FormItemProp, isValid: boolean, message: string) => boolean;
                }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    readonly disabled: boolean;
                    readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                    readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                    readonly labelSuffix: string;
                    readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly inline: boolean;
                    readonly inlineMessage: boolean;
                    readonly statusIcon: boolean;
                    readonly hideRequiredAsterisk: boolean;
                    readonly scrollToError: boolean;
                }, true, {}, {}, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }, {
                    /**
                     * 搜索与表格分割线
                     */
                    COMPONENT_NAME: string;
                    props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                        readonly model: ObjectConstructor;
                        readonly rules: {
                            readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                        readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                        readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                        readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                        readonly inline: BooleanConstructor;
                        readonly inlineMessage: BooleanConstructor;
                        readonly statusIcon: BooleanConstructor;
                        readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                        readonly hideRequiredAsterisk: BooleanConstructor;
                        readonly scrollToError: BooleanConstructor;
                        readonly scrollIntoViewOptions: {
                            readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly size: {
                            readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                            readonly required: false;
                            readonly validator: ((val: unknown) => boolean) | undefined;
                            __epPropKey: true;
                        };
                        readonly disabled: BooleanConstructor;
                    }>> & {
                        onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                    }>>;
                    emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                    fields: FormItemContext[];
                    formSize: ComputedRef<"" | "default" | "small" | "large">;
                    ns: {
                        namespace: ComputedRef<string>;
                        b: (blockSuffix?: string | undefined) => string;
                        e: (element?: string | undefined) => string;
                        m: (modifier?: string | undefined) => string;
                        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                        em: (element?: string | undefined, modifier?: string | undefined) => string;
                        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                        is: {
                            (name: string, state: boolean | undefined): string;
                            (name: string): string;
                        };
                        cssVar: (object: Record<string, string>) => Record<string, string>;
                        cssVarName: (name: string) => string;
                        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                        cssVarBlockName: (name: string) => string;
                    };
                    formClasses: ComputedRef<(string | {
                        [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    })[]>;
                    getField: (prop: string) => FormItemContext | undefined;
                    addField: (field: FormItemContext) => void;
                    removeField: (field: FormItemContext) => void;
                    resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                    clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                    isValidatable: ComputedRef<boolean>;
                    obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                    validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                    doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                    validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                    scrollToField: (prop: FormItemProp) => void;
                }, {}, {}, {}, {
                    readonly disabled: boolean;
                    readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                    readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                    readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                    readonly labelSuffix: string;
                    readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                    readonly inline: boolean;
                    readonly inlineMessage: boolean;
                    readonly statusIcon: boolean;
                    readonly hideRequiredAsterisk: boolean;
                    readonly scrollToError: boolean;
                }> | null>;
                handleSubmit: () => Promise<boolean>;
                handleReset: () => void;
            }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                "update:modelValue": (values: FieldValues) => void;
                submit: (values: FieldValues) => void;
                change: (values: FieldValues, column: PlusColumn) => void;
                reset: (values: FieldValues) => void;
                submitError: (errors: unknown) => void;
                validate: (...args: any[]) => void;
            }, string, {
                columns: PlusColumn[];
                group: false | PlusFormGroupRow[];
                rules: Partial<Record<string, Arrayable<FormItemRule>>>;
                labelPosition: "top" | "right" | "left";
                labelWidth: string | number;
                labelSuffix: string;
                hasLabel: boolean;
                modelValue: FieldValues;
                defaultValues: FieldValues;
                rowProps: Partial<Mutable< RowProps>>;
                colProps: Partial<Mutable< ColProps>>;
                hasErrorTip: boolean;
                hasFooter: boolean;
                hasReset: boolean;
                submitText: string;
                resetText: string;
                submitLoading: boolean;
                footerAlign: "right" | "left" | "center";
                cardProps: Partial<Mutable<CardProps>>;
                prevent: boolean;
                collapseDuration: number;
                collapseTransition: boolean;
                clearable: boolean;
            }, {}, string, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle;
        } & Omit<Readonly< ExtractPropTypes<{
            columns: {
                type: PropType<PlusColumn[]>;
                default: () => never[];
            };
            group: {
                type: PropType<false | PlusFormGroupRow[]>;
                default: boolean;
            };
            rules: {
                type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                default: () => {};
            };
            labelPosition: {
                type: PropType<"top" | "right" | "left">;
                default: string;
            };
            labelWidth: {
                type: PropType<string | number>;
                default: string;
            };
            labelSuffix: {
                type: PropType<string>;
                default: string;
            };
            hasLabel: {
                type: PropType<boolean>;
                default: boolean;
            };
            modelValue: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            defaultValues: {
                type: PropType<FieldValues>;
                default: () => {};
            };
            rowProps: {
                type: PropType<Partial<Mutable< RowProps>>>;
                default: () => {};
            };
            colProps: {
                type: PropType<Partial<Mutable< ColProps>>>;
                default: () => {};
            };
            hasErrorTip: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasFooter: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasReset: {
                type: PropType<boolean>;
                default: boolean;
            };
            submitText: {
                type: PropType<string>;
                default: string;
            };
            resetText: {
                type: PropType<string>;
                default: string;
            };
            submitLoading: {
                type: PropType<boolean>;
                default: boolean;
            };
            footerAlign: {
                type: PropType<"right" | "left" | "center">;
                default: string;
            };
            cardProps: {
                type: PropType<Partial<Mutable<CardProps>>>;
                default: () => {};
            };
            prevent: {
                type: PropType<boolean>;
                default: boolean;
            };
            collapseDuration: {
                type: PropType<number>;
                default: undefined;
            };
            collapseTransition: {
                type: PropType<boolean>;
                default: undefined;
            };
            clearable: {
                type: PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onValidate?: ((...args: any[]) => any) | undefined;
            onChange?: ((values: FieldValues, column: PlusColumn) => any) | undefined;
            "onUpdate:modelValue"?: ((values: FieldValues) => any) | undefined;
            onSubmit?: ((values: FieldValues) => any) | undefined;
            onReset?: ((values: FieldValues) => any) | undefined;
            onSubmitError?: ((errors: unknown) => any) | undefined;
        }, "formInstance" | "handleSubmit" | "handleReset"> & ShallowUnwrapRef<{
            formInstance: Ref< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
                readonly model: ObjectConstructor;
                readonly rules: {
                    readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                readonly inline: BooleanConstructor;
                readonly inlineMessage: BooleanConstructor;
                readonly statusIcon: BooleanConstructor;
                readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly hideRequiredAsterisk: BooleanConstructor;
                readonly scrollToError: BooleanConstructor;
                readonly scrollIntoViewOptions: {
                    readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly disabled: BooleanConstructor;
            }>> & {
                onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
            }, {
                /**
                 * 搜索与表格分割线
                 */
                COMPONENT_NAME: string;
                props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }>>;
                emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                fields: FormItemContext[];
                formSize: ComputedRef<"" | "default" | "small" | "large">;
                ns: {
                    namespace: ComputedRef<string>;
                    b: (blockSuffix?: string | undefined) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                formClasses: ComputedRef<(string | {
                    [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                })[]>;
                getField: (prop: string) => FormItemContext | undefined;
                addField: (field: FormItemContext) => void;
                removeField: (field: FormItemContext) => void;
                resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                isValidatable: ComputedRef<boolean>;
                obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                scrollToField: (prop: FormItemProp) => void;
            }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
                validate: (prop: FormItemProp, isValid: boolean, message: string) => boolean;
            }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                readonly model: ObjectConstructor;
                readonly rules: {
                    readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                readonly inline: BooleanConstructor;
                readonly inlineMessage: BooleanConstructor;
                readonly statusIcon: BooleanConstructor;
                readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly hideRequiredAsterisk: BooleanConstructor;
                readonly scrollToError: BooleanConstructor;
                readonly scrollIntoViewOptions: {
                    readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly disabled: BooleanConstructor;
            }>> & {
                onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
            }, {
                readonly disabled: boolean;
                readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                readonly labelSuffix: string;
                readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly inline: boolean;
                readonly inlineMessage: boolean;
                readonly statusIcon: boolean;
                readonly hideRequiredAsterisk: boolean;
                readonly scrollToError: boolean;
            }, true, {}, {}, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly< ExtractPropTypes<{
                readonly model: ObjectConstructor;
                readonly rules: {
                    readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                readonly inline: BooleanConstructor;
                readonly inlineMessage: BooleanConstructor;
                readonly statusIcon: BooleanConstructor;
                readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                readonly hideRequiredAsterisk: BooleanConstructor;
                readonly scrollToError: BooleanConstructor;
                readonly scrollIntoViewOptions: {
                    readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                readonly disabled: BooleanConstructor;
            }>> & {
                onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
            }, {
                /**
                 * 搜索与表格分割线
                 */
                COMPONENT_NAME: string;
                props: Readonly< LooseRequired<Readonly< ExtractPropTypes<{
                    readonly model: ObjectConstructor;
                    readonly rules: {
                        readonly type: PropType<Partial<Record<string, Arrayable<FormItemRule>>>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly labelPosition: EpPropFinalized<StringConstructor, "top" | "right" | "left", unknown, "right", boolean>;
                    readonly requireAsteriskPosition: EpPropFinalized<StringConstructor, "right" | "left", unknown, "left", boolean>;
                    readonly labelWidth: EpPropFinalized<readonly [StringConstructor, NumberConstructor], unknown, unknown, "", boolean>;
                    readonly labelSuffix: EpPropFinalized<StringConstructor, unknown, unknown, "", boolean>;
                    readonly inline: BooleanConstructor;
                    readonly inlineMessage: BooleanConstructor;
                    readonly statusIcon: BooleanConstructor;
                    readonly showMessage: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly validateOnRuleChange: EpPropFinalized<BooleanConstructor, unknown, unknown, true, boolean>;
                    readonly hideRequiredAsterisk: BooleanConstructor;
                    readonly scrollToError: BooleanConstructor;
                    readonly scrollIntoViewOptions: {
                        readonly type: PropType<EpPropMergeType<readonly [ObjectConstructor, BooleanConstructor], unknown, unknown>>;
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly size: {
                        readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", unknown>>; /** 渲染包裹层 */
                        readonly required: false;
                        readonly validator: ((val: unknown) => boolean) | undefined;
                        __epPropKey: true;
                    };
                    readonly disabled: BooleanConstructor;
                }>> & {
                    onValidate?: ((prop: FormItemProp, isValid: boolean, message: string) => any) | undefined;
                }>>;
                emit: (event: "validate", prop: FormItemProp, isValid: boolean, message: string) => void;
                fields: FormItemContext[];
                formSize: ComputedRef<"" | "default" | "small" | "large">;
                ns: {
                    namespace: ComputedRef<string>;
                    b: (blockSuffix?: string | undefined) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                formClasses: ComputedRef<(string | {
                    [x: string]: boolean | EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                })[]>;
                getField: (prop: string) => FormItemContext | undefined;
                addField: (field: FormItemContext) => void;
                removeField: (field: FormItemContext) => void;
                resetFields: (props?: Arrayable<FormItemProp> | undefined) => void;
                clearValidate: (props?: Arrayable<FormItemProp> | undefined) => void;
                isValidatable: ComputedRef<boolean>;
                obtainValidateFields: (props: Arrayable<FormItemProp>) => FormItemContext[];
                validate: (callback?: FormValidateCallback | undefined) => FormValidationResult;
                doValidateField: (props?: Arrayable<FormItemProp> | undefined) => Promise<boolean>;
                validateField: (props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult;
                scrollToField: (prop: FormItemProp) => void;
            }, {}, {}, {}, {
                readonly disabled: boolean;
                readonly labelPosition: EpPropMergeType<StringConstructor, "top" | "right" | "left", unknown>;
                readonly requireAsteriskPosition: EpPropMergeType<StringConstructor, "right" | "left", unknown>;
                readonly labelWidth: EpPropMergeType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
                readonly labelSuffix: string;
                readonly showMessage: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly validateOnRuleChange: EpPropMergeType<BooleanConstructor, unknown, unknown>;
                readonly inline: boolean;
                readonly inlineMessage: boolean;
                readonly statusIcon: boolean;
                readonly hideRequiredAsterisk: boolean;
                readonly scrollToError: boolean;
            }> | null>;
            handleSubmit: () => Promise<boolean>;
            handleReset: () => void;
        }> & {} & ComponentCustomProperties & {} & {
            $slots: Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
                [x: string]: any;
                label?: string | ComputedRef<string> | undefined;
                prop: string;
                width?: string | number | undefined;
                minWidth?: string | number | undefined;
                editable?: boolean | undefined;
                valueType?: TableValueType | FormItemValueType;
                hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                descriptionsItemProps?: RecordType | undefined;
                options?: OptionsType | undefined;
                optionsMap?: {
                    label?: string | undefined;
                    value?: string | undefined;
                } | undefined;
                customGetStatus?: ((data: {
                    options: OptionsRow<undefined>[];
                    value: string | number;
                    row: RecordType;
                }) => OptionsRow<undefined>) | undefined;
                tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
                render?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => RenderTypes) | undefined;
                renderHTML?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string) | undefined;
                renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderDescriptionsItem?: ((data: {
                    value: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                renderDescriptionsLabel?: ((data: {
                    label: string;
                    column: PlusColumn;
                    row: RecordType;
                }) => RenderTypes) | undefined;
                order?: number | ComputedRef<number> | undefined;
                children?: PlusColumn[] | undefined;
                headerFilter?: boolean | undefined;
                disabledHeaderFilter?: boolean | undefined;
                tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                    [key: string]: any;
                }> | undefined;
                preview?: boolean | undefined;
                linkText?: string | undefined;
                formatter?: ((value: any, data: {
                    row: RecordType;
                    column: PlusColumn;
                    index: number;
                }) => string | number) | undefined;
                formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                    row: Record<string, any>;
                    index: number;
                }) => Partial< PlusFormProps>) | undefined;
                formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                fieldProps?: PropsItemType<Partial<{
                    [key: string]: any;
                    style: CSSProperties;
                    rows: number;
                    autocomplete: string;
                    type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                    loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                    step: string | number;
                    format: string | ProgressFn | undefined;
                    filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                    id: string | [string, string];
                    effect: string;
                    height: string | number;
                    autosize: InputAutoSize;
                } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
                renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
                colProps?: Partial<Mutable< ColProps> & {
                    [key: string]: any;
                    style?: CSSProperties | undefined;
                }> | undefined;
                hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
                renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
                renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
                fieldSlots?: {
                    [slotName: string]: (data?: any) => RenderTypes;
                } | undefined;
                fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
            }) => any>> & {
                default?(_: {}): any;
                "group-header"?(_: {
                    title: string;
                    columns: PlusColumn[];
                    icon: Component | undefined;
                    index: number;
                }): any;
                "tooltip-icon"?(_: {}): any;
                "search-footer"?(_: {}): any;
                footer?(_: {
                    handleReset: () => void;
                    handleSubmit: () => Promise<boolean>;
                }): any;
            };
        }) | null | undefined>;
        handleReset: () => void;
        handleSearch: () => void;
        handleUnfold: (e: MouseEvent) => void;
    }> & {} & ComponentCustomProperties & {} & {
        $slots: Partial<Record<NonNullable<string | number>, (_: {
            [x: string]: any;
            label?: string | ComputedRef<string> | undefined;
            prop: string;
            width?: string | number | undefined;
            minWidth?: string | number | undefined;
            editable?: boolean | undefined;
            valueType?: TableValueType | FormItemValueType;
            hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            descriptionsItemProps?: RecordType | undefined;
            options?: OptionsType | undefined;
            optionsMap?: {
                label?: string | undefined;
                value?: string | undefined;
            } | undefined;
            customGetStatus?: ((data: {
                options: OptionsRow<undefined>[];
                value: string | number;
                row: RecordType;
            }) => OptionsRow<undefined>) | undefined;
            tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
            render?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => RenderTypes) | undefined;
            renderHTML?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string) | undefined;
            renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderDescriptionsItem?: ((data: {
                value: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            renderDescriptionsLabel?: ((data: {
                label: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            order?: number | ComputedRef<number> | undefined;
            children?: PlusColumn[] | undefined;
            headerFilter?: boolean | undefined;
            disabledHeaderFilter?: boolean | undefined;
            tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                [key: string]: any;
            }> | undefined;
            preview?: boolean | undefined;
            linkText?: string | undefined;
            formatter?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string | number) | undefined;
            formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                row: Record<string, any>;
                index: number;
            }) => Partial< PlusFormProps>) | undefined;
            formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            fieldProps?: PropsItemType<Partial<{
                [key: string]: any;
                style: CSSProperties;
                rows: number;
                autocomplete: string;
                type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                step: string | number;
                format: string | ProgressFn | undefined;
                filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                id: string | [string, string];
                effect: string;
                height: string | number;
                autosize: InputAutoSize;
            } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
            renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
            colProps?: Partial<Mutable< ColProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
            fieldSlots?: {
                [slotName: string]: (data?: any) => RenderTypes;
            } | undefined;
            fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
        }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
            [x: string]: any;
            label?: string | ComputedRef<string> | undefined;
            prop: string;
            width?: string | number | undefined;
            minWidth?: string | number | undefined;
            editable?: boolean | undefined;
            valueType?: TableValueType | FormItemValueType;
            hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            descriptionsItemProps?: RecordType | undefined;
            options?: OptionsType | undefined;
            optionsMap?: {
                label?: string | undefined;
                value?: string | undefined;
            } | undefined;
            customGetStatus?: ((data: {
                options: OptionsRow<undefined>[];
                value: string | number;
                row: RecordType;
            }) => OptionsRow<undefined>) | undefined;
            tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
            render?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => RenderTypes) | undefined;
            renderHTML?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string) | undefined;
            renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderDescriptionsItem?: ((data: {
                value: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            renderDescriptionsLabel?: ((data: {
                label: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            order?: number | ComputedRef<number> | undefined;
            children?: PlusColumn[] | undefined;
            headerFilter?: boolean | undefined;
            disabledHeaderFilter?: boolean | undefined;
            tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                [key: string]: any;
            }> | undefined;
            preview?: boolean | undefined;
            linkText?: string | undefined;
            formatter?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string | number) | undefined;
            formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                row: Record<string, any>;
                index: number;
            }) => Partial< PlusFormProps>) | undefined;
            formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            fieldProps?: PropsItemType<Partial<{
                [key: string]: any;
                style: CSSProperties;
                rows: number;
                autocomplete: string;
                type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                step: string | number;
                format: string | ProgressFn | undefined;
                filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                id: string | [string, string];
                effect: string;
                height: string | number;
                autosize: InputAutoSize;
            } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
            renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
            colProps?: Partial<Mutable< ColProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
            fieldSlots?: {
                [slotName: string]: (data?: any) => RenderTypes;
            } | undefined;
            fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
        }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
            [x: string]: any;
            label?: string | ComputedRef<string> | undefined;
            prop: string;
            width?: string | number | undefined;
            minWidth?: string | number | undefined;
            editable?: boolean | undefined;
            valueType?: TableValueType | FormItemValueType;
            hideInDescriptions?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInForm?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInTable?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            hideInSearch?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            descriptionsItemProps?: RecordType | undefined;
            options?: OptionsType | undefined;
            optionsMap?: {
                label?: string | undefined;
                value?: string | undefined;
            } | undefined;
            customGetStatus?: ((data: {
                options: OptionsRow<undefined>[];
                value: string | number;
                row: RecordType;
            }) => OptionsRow<undefined>) | undefined;
            tooltip?: string | Partial< ElTooltipProps> | ComputedRef<string> | ComputedRef<Partial< ElTooltipProps>> | undefined;
            render?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => RenderTypes) | undefined;
            renderHTML?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string) | undefined;
            renderHeader?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderDescriptionsItem?: ((data: {
                value: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            renderDescriptionsLabel?: ((data: {
                label: string;
                column: PlusColumn;
                row: RecordType;
            }) => RenderTypes) | undefined;
            order?: number | ComputedRef<number> | undefined;
            children?: PlusColumn[] | undefined;
            headerFilter?: boolean | undefined;
            disabledHeaderFilter?: boolean | undefined;
            tableColumnProps?: Partial<Omit< TableColumnCtx<any>, "label " | "prop" | "width" | "minWidth"> & {
                [key: string]: any;
            }> | undefined;
            preview?: boolean | undefined;
            linkText?: string | undefined;
            formatter?: ((value: any, data: {
                row: RecordType;
                column: PlusColumn;
                index: number;
            }) => string | number) | undefined;
            formProps?: Partial< PlusFormProps> | ComputedRef<Partial< PlusFormProps>> | ((value: FieldValueType, data: {
                row: Record<string, any>;
                index: number;
            }) => Partial< PlusFormProps>) | undefined;
            formItemProps?: PropsItemType<Mutable< FormItemProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            fieldProps?: PropsItemType<Partial<{
                [key: string]: any;
                style: CSSProperties;
                rows: number;
                autocomplete: string;
                type: "" | "number" | "default" | "search" | "checkbox" | "radio" | "textarea" | "text" | "circle" | "color" | "button" | "success" | "warning" | "info" | "primary" | "danger" | "reset" | "submit" | "date" | "year" | "years" | "month" | "dates" | "week" | "datetime" | "datetimerange" | "daterange" | "monthrange" | "range" | "line" | "dashboard" | "hidden" | "time" | "image" | "datetime-local" | "email" | "file" | "password" | "tel" | "url";
                loading: EpPropMergeType<BooleanConstructor, unknown, unknown> | EpPropMergeType<StringConstructor, "lazy" | "eager", unknown> | undefined;
                step: string | number;
                format: string | ProgressFn | undefined;
                filterMethod: Function | ((node: CascaderNode, keyword: string) => boolean) | undefined;
                id: string | [string, string];
                effect: string;
                height: string | number;
                autosize: InputAutoSize;
            } & Mutable<Omit< AutocompleteProps, OmitTypes> & Omit< CascaderProps, OmitTypes> & Omit< CheckboxGroupProps, OmitTypes> & Omit< ColorPickerProps, OmitTypes> & Omit< DatePickerProps, OmitTypes> & Omit< InputProps, OmitTypes> & Omit< InputNumberProps, OmitTypes> & Omit< RadioGroupProps, OmitTypes> & Omit< RateProps, OmitTypes> & Omit< ISelectProps, OmitTypes> & Omit< SliderProps, OmitTypes> & Omit< SwitchProps, OmitTypes> & Omit< TimePickerDefaultProps, OmitTypes> & Omit< TimeSelectProps, OmitTypes> & Omit< PlusRadioProps, OmitTypes> & Omit< PlusDatePickerProps, OmitTypes> & Omit< PlusInputTagProps, OmitTypes> & Omit< TextProps, OmitTypes> & Omit< ImageProps, OmitTypes> & Omit< LinkProps, OmitTypes> & Omit< TagProps, OmitTypes> & Omit< ProgressProps, OmitTypes>>>> | undefined;
            renderField?: ((value: FieldValueType, onChange: (value: FieldValueType) => void, props: PlusColumn) => RenderTypes) | undefined;
            colProps?: Partial<Mutable< ColProps> & {
                [key: string]: any;
                style?: CSSProperties | undefined;
            }> | undefined;
            hasLabel?: boolean | Ref<boolean> | ComputedRef<boolean> | undefined;
            renderLabel?: ((label: string, props: PlusColumn) => RenderTypes) | undefined;
            renderExtra?: ((column: PlusColumn) => RenderTypes) | undefined;
            fieldSlots?: {
                [slotName: string]: (data?: any) => RenderTypes;
            } | undefined;
            fieldChildrenSlot?: ((option?: OptionsRow<undefined> | undefined) => RenderTypes) | undefined;
        }) => any>> & {
            "tooltip-icon"?(_: {}): any;
            footer?(_: {
                isShowUnfold: boolean;
                handleReset: () => void;
                handleSearch: () => void;
                handleUnfold: (e: MouseEvent) => void;
            }): any;
        };
    }) | null>;
    plusTableInstance: Ref<({
        $: ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            columns: PlusColumn[];
            headerCellStyle: Partial< CSSProperties> | Partial<(data: {
                row: any[];
                rowIndex: number;
                column: TableColumnCtx<any[]>;
                columnIndex: number;
            }) => CSSProperties>;
            rowKey: string | ((row: any[]) => string);
            tableData: RecordType[];
            data: RecordType[];
            defaultSize: "" | "default" | "small" | "large";
            pagination: false | Partial<PlusPaginationProps>;
            actionBar: false | Partial< ActionBarProps>;
            hasIndexColumn: boolean;
            titleBar: boolean | Partial<Partial<{
                title?: string | undefined;
                refresh?: boolean | undefined;
                density?: boolean | undefined;
                columnSetting?: boolean | ColumnSetting | undefined;
                icon?: {
                    size?: string | undefined;
                    color?: string | undefined;
                } | undefined;
            }>>;
            isSelection: boolean;
            hasExpand: boolean;
            loadingStatus: boolean;
            dragSortable: false | Partial< Options>;
            dragSortableTableColumnProps: Partial< TableColumnCtx<any>>;
            indexTableColumnProps: Partial< TableColumnCtx<any>>;
            selectionTableColumnProps: Partial< TableColumnCtx<any>>;
            expandTableColumnProps: Partial< TableColumnCtx<any>>;
            indexContentStyle: Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>);
            editable: boolean | "click" | "dblclick";
            adaptive: boolean | {
                offsetBottom?: number | undefined;
                timeout?: number | undefined;
            };
        }> & Omit<{
            readonly columns: PlusColumn[];
            readonly headerCellStyle: Partial< CSSProperties> | Partial<(data: {
                row: any[];
                rowIndex: number;
                column: TableColumnCtx<any[]>;
                columnIndex: number;
            }) => CSSProperties>;
            readonly rowKey: string | ((row: any[]) => string);
            readonly tableData: RecordType[];
            readonly data: RecordType[];
            readonly defaultSize: "" | "default" | "small" | "large";
            readonly pagination: false | Partial<PlusPaginationProps>;
            readonly actionBar: false | Partial< ActionBarProps>;
            readonly hasIndexColumn: boolean;
            readonly titleBar: boolean | Partial<Partial<{
                title?: string | undefined;
                refresh?: boolean | undefined;
                density?: boolean | undefined;
                columnSetting?: boolean | ColumnSetting | undefined;
                icon?: {
                    size?: string | undefined;
                    color?: string | undefined;
                } | undefined;
            }>>;
            readonly isSelection: boolean;
            readonly hasExpand: boolean;
            readonly loadingStatus: boolean;
            readonly dragSortable: false | Partial< Options>;
            readonly dragSortableTableColumnProps: Partial< TableColumnCtx<any>>;
            readonly indexTableColumnProps: Partial< TableColumnCtx<any>>;
            readonly selectionTableColumnProps: Partial< TableColumnCtx<any>>;
            readonly expandTableColumnProps: Partial< TableColumnCtx<any>>;
            readonly indexContentStyle: Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>);
            readonly editable: boolean | "click" | "dblclick";
            readonly adaptive: boolean | {
                offsetBottom?: number | undefined;
                timeout?: number | undefined;
            };
            readonly height?: string | number | undefined;
            onRefresh?: (() => any) | undefined;
            onPaginationChange?: ((pageInfo: PageInfo) => any) | undefined;
            onClickAction?: ((data: ButtonsCallBackParams) => any) | undefined;
            onClickActionConfirmCancel?: ((data: ButtonsCallBackParams) => any) | undefined;
            onDragSortEnd?: ((newIndex: number, oldIndex: number) => any) | undefined;
            onFormChange?: ((data: FormChangeCallBackParams) => any) | undefined;
            onEdited?: (() => any) | undefined;
            "onCell-click"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
            "onCell-dblclick"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
        } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
            columns: {
                type: PropType<PlusColumn[]>;
                default: () => never[];
            };
            height: {
                type: PropType<string | number>;
            };
            headerCellStyle: {
                type: PropType<Partial< CSSProperties> | Partial<(data: {
                    row: any[];
                    rowIndex: number;
                    column: TableColumnCtx<any[]>;
                    columnIndex: number;
                }) => CSSProperties>>;
                default: () => {
                    'background-color': string;
                };
            };
            rowKey: {
                type: PropType<string | ((row: any[]) => string)>;
                default: string;
            };
            tableData: {
                type: PropType<RecordType[]>;
                default: () => never[];
            };
            data: {
                type: PropType<RecordType[]>;
                default: () => never[];
            };
            defaultSize: {
                type: PropType<"" | "default" | "small" | "large">;
                default: string;
            };
            pagination: {
                type: PropType<false | Partial<PlusPaginationProps>>;
                default: boolean;
            };
            actionBar: {
                type: PropType<false | Partial< ActionBarProps>>;
                default: boolean;
            };
            hasIndexColumn: {
                type: PropType<boolean>;
                default: boolean;
            };
            titleBar: {
                type: PropType<boolean | Partial<Partial<{
                    title?: string | undefined;
                    refresh?: boolean | undefined;
                    density?: boolean | undefined;
                    columnSetting?: boolean | ColumnSetting | undefined;
                    icon?: {
                        size?: string | undefined;
                        color?: string | undefined;
                    } | undefined;
                }>>>;
                default: boolean;
            };
            isSelection: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasExpand: {
                type: PropType<boolean>;
                default: boolean;
            };
            loadingStatus: {
                type: PropType<boolean>;
                default: boolean;
            };
            dragSortable: {
                type: PropType<false | Partial< Options>>;
                default: boolean;
            };
            dragSortableTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            indexTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            selectionTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {
                    width: number;
                };
            };
            expandTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            indexContentStyle: {
                type: PropType<Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>)>;
                default: () => {};
            };
            editable: {
                type: PropType<boolean | "click" | "dblclick">;
                default: boolean;
            };
            adaptive: {
                type: PropType<boolean | {
                    offsetBottom?: number | undefined;
                    timeout?: number | undefined;
                }>;
                default: boolean;
            };
        }>> & {
            onRefresh?: (() => any) | undefined;
            onPaginationChange?: ((pageInfo: PageInfo) => any) | undefined;
            onClickAction?: ((data: ButtonsCallBackParams) => any) | undefined;
            onClickActionConfirmCancel?: ((data: ButtonsCallBackParams) => any) | undefined;
            onDragSortEnd?: ((newIndex: number, oldIndex: number) => any) | undefined;
            onFormChange?: ((data: FormChangeCallBackParams) => any) | undefined;
            onEdited?: (() => any) | undefined;
            "onCell-click"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
            "onCell-dblclick"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
        }, "columns" | "headerCellStyle" | "rowKey" | "tableData" | "data" | "defaultSize" | "pagination" | "actionBar" | "hasIndexColumn" | "titleBar" | "isSelection" | "hasExpand" | "loadingStatus" | "dragSortable" | "dragSortableTableColumnProps" | "indexTableColumnProps" | "selectionTableColumnProps" | "expandTableColumnProps" | "indexContentStyle" | "editable" | "adaptive">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: Slot<any> | undefined;
        }>;
        $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: ((event: "paginationChange", pageInfo: PageInfo) => void) & ((event: "clickAction", data: ButtonsCallBackParams) => void) & ((event: "clickActionConfirmCancel", data: ButtonsCallBackParams) => void) & ((event: "dragSortEnd", newIndex: number, oldIndex: number) => void) & ((event: "formChange", data: FormChangeCallBackParams) => void) & ((event: "refresh") => void) & ((event: "edited") => void) & ((event: "cell-click", row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => void) & ((event: "cell-dblclick", row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => void);
        $el: any;
        $options: ComponentOptionsBase<Readonly< ExtractPropTypes<{
            columns: {
                type: PropType<PlusColumn[]>;
                default: () => never[];
            };
            height: {
                type: PropType<string | number>;
            };
            headerCellStyle: {
                type: PropType<Partial< CSSProperties> | Partial<(data: {
                    row: any[];
                    rowIndex: number;
                    column: TableColumnCtx<any[]>;
                    columnIndex: number;
                }) => CSSProperties>>;
                default: () => {
                    'background-color': string;
                };
            };
            rowKey: {
                type: PropType<string | ((row: any[]) => string)>;
                default: string;
            };
            tableData: {
                type: PropType<RecordType[]>;
                default: () => never[];
            };
            data: {
                type: PropType<RecordType[]>;
                default: () => never[];
            };
            defaultSize: {
                type: PropType<"" | "default" | "small" | "large">;
                default: string;
            };
            pagination: {
                type: PropType<false | Partial<PlusPaginationProps>>;
                default: boolean;
            };
            actionBar: {
                type: PropType<false | Partial< ActionBarProps>>;
                default: boolean;
            };
            hasIndexColumn: {
                type: PropType<boolean>;
                default: boolean;
            };
            titleBar: {
                type: PropType<boolean | Partial<Partial<{
                    title?: string | undefined;
                    refresh?: boolean | undefined;
                    density?: boolean | undefined;
                    columnSetting?: boolean | ColumnSetting | undefined;
                    icon?: {
                        size?: string | undefined;
                        color?: string | undefined;
                    } | undefined;
                }>>>;
                default: boolean;
            };
            isSelection: {
                type: PropType<boolean>;
                default: boolean;
            };
            hasExpand: {
                type: PropType<boolean>;
                default: boolean;
            };
            loadingStatus: {
                type: PropType<boolean>;
                default: boolean;
            };
            dragSortable: {
                type: PropType<false | Partial< Options>>;
                default: boolean;
            };
            dragSortableTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            indexTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            selectionTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {
                    width: number;
                };
            };
            expandTableColumnProps: {
                type: PropType<Partial< TableColumnCtx<any>>>;
                default: () => {};
            };
            indexContentStyle: {
                type: PropType<Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>)>;
                default: () => {};
            };
            editable: {
                type: PropType<boolean | "click" | "dblclick">;
                default: boolean;
            };
            adaptive: {
                type: PropType<boolean | {
                    offsetBottom?: number | undefined;
                    timeout?: number | undefined;
                }>;
                default: boolean;
            };
        }>> & {
            onRefresh?: (() => any) | undefined;
            onPaginationChange?: ((pageInfo: PageInfo) => any) | undefined;
            onClickAction?: ((data: ButtonsCallBackParams) => any) | undefined;
            onClickActionConfirmCancel?: ((data: ButtonsCallBackParams) => any) | undefined;
            onDragSortEnd?: ((newIndex: number, oldIndex: number) => any) | undefined;
            onFormChange?: ((data: FormChangeCallBackParams) => any) | undefined;
            onEdited?: (() => any) | undefined;
            "onCell-click"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
            "onCell-dblclick"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
        }, {
            formRefs: ShallowRef<Record<string | number, TableFormRefRow[]>>;
            tableInstance: ShallowRef< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
                data: {
                    type: PropType<any[]>;
                    default: () => never[];
                };
                size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                width: (NumberConstructor | StringConstructor)[];
                height: (NumberConstructor | StringConstructor)[];
                maxHeight: (NumberConstructor | StringConstructor)[];
                fit: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                stripe: BooleanConstructor;
                border: BooleanConstructor;
                rowKey: PropType<string | ((row: any) => string) | undefined>;
                showHeader: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showSummary: BooleanConstructor;
                sumText: StringConstructor;
                summaryMethod: PropType< SummaryMethod<any> | undefined>;
                rowClassName: PropType< ColumnCls<any> | undefined>;
                rowStyle: PropType< ColumnStyle<any> | undefined>;
                cellClassName: PropType< CellCls<any> | undefined>;
                cellStyle: PropType< CellStyle<any> | undefined>;
                headerRowClassName: PropType< ColumnCls<any> | undefined>;
                headerRowStyle: PropType< ColumnStyle<any> | undefined>;
                headerCellClassName: PropType< CellCls<any> | undefined>;
                headerCellStyle: PropType< CellStyle<any> | undefined>;
                highlightCurrentRow: BooleanConstructor;
                currentRowKey: (NumberConstructor | StringConstructor)[];
                emptyText: StringConstructor;
                expandRowKeys: PropType<any[] | undefined>;
                defaultExpandAll: BooleanConstructor;
                defaultSort: PropType< Sort | undefined>;
                tooltipEffect: StringConstructor;
                tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
                spanMethod: PropType<((data: {
                    row: any;
                    rowIndex: number;
                    column: TableColumnCtx<any>;
                    columnIndex: number;
                }) => number[] | {
                    rowspan: number;
                    colspan: number;
                } | undefined) | undefined>;
                selectOnIndeterminate: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                indent: {
                    type: NumberConstructor;
                    default: number;
                };
                treeProps: {
                    type: PropType<{
                        hasChildren?: string | undefined;
                        children?: string | undefined;
                    } | undefined>;
                    default: () => {
                        hasChildren: string;
                        children: string;
                    };
                };
                lazy: BooleanConstructor;
                load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
                style: {
                    type: PropType<CSSProperties>;
                    default: () => {};
                };
                className: {
                    type: StringConstructor;
                    default: string;
                };
                tableLayout: {
                    type: PropType<"fixed" | "auto">;
                    default: string;
                };
                scrollbarAlwaysOn: BooleanConstructor;
                flexible: BooleanConstructor;
                showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            }>> & {
                onSelect?: ((...args: any[]) => any) | undefined;
                "onExpand-change"?: ((...args: any[]) => any) | undefined;
                "onCurrent-change"?: ((...args: any[]) => any) | undefined;
                "onSelect-all"?: ((...args: any[]) => any) | undefined;
                "onSelection-change"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
                "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onCell-click"?: ((...args: any[]) => any) | undefined;
                "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
                "onRow-click"?: ((...args: any[]) => any) | undefined;
                "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
                "onHeader-click"?: ((...args: any[]) => any) | undefined;
                "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onSort-change"?: ((...args: any[]) => any) | undefined;
                "onFilter-change"?: ((...args: any[]) => any) | undefined;
                "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
            }, {
                ns: {
                    namespace: ComputedRef<string>;
                    b: (blockSuffix?: string | undefined) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                layout: __DTS_DEFAULT_0__<any>;
                store: any;
                handleHeaderFooterMousewheel: (event: any, data: any) => void;
                handleMouseLeave: () => void;
                tableId: string;
                tableSize: ComputedRef<"" | "default" | "small" | "large">;
                isHidden: Ref<boolean>;
                isEmpty: ComputedRef<boolean>;
                renderExpanded: Ref<null>;
                resizeProxyVisible: Ref<boolean>;
                resizeState: Ref<{
                    width: number | null;
                    height: number | null;
                    headerHeight: number | null;
                }>;
                isGroup: Ref<boolean>;
                bodyWidth: ComputedRef<string>;
                tableBodyStyles: ComputedRef<{
                    width: string;
                }>;
                emptyBlockStyle: ComputedRef<{
                    width: string;
                    height: string;
                } | null>;
                debouncedUpdateLayout: DebouncedFunc<() => void>;
                handleFixedMousewheel: (event: any, data: any) => void;
                /**
                 * 获取搜索的值
                 * @version v0.1.17
                 */
                setCurrentRow: (row: any) => void;
                getSelectionRows: () => any;
                toggleRowSelection: (row: any, selected: boolean) => void;
                clearSelection: () => void;
                clearFilter: (columnKeys?: string[] | undefined) => void;
                toggleAllSelection: () => void;
                toggleRowExpansion: (row: any, expanded?: boolean | undefined) => void;
                clearSort: () => void;
                doLayout: () => void;
                sort: (prop: string, order: string) => void;
                t: Translator;
                setDragVisible: (visible: boolean) => void;
                context: Table<any>;
                computedSumText: ComputedRef<string>;
                computedEmptyText: ComputedRef<string>;
                tableLayout: ComputedRef<"fixed" | "auto" | undefined>;
                scrollbarViewStyle: {
                    display: string;
                    verticalAlign: string;
                };
                tableInnerStyle: ComputedRef<{
                    height: string | number;
                    maxHeight?: undefined;
                } | {
                    maxHeight: string | number;
                    height?: undefined;
                } | {
                    height?: undefined;
                    maxHeight?: undefined;
                }>;
                scrollbarStyle: ComputedRef<{
                    height: string;
                    maxHeight?: undefined;
                } | {
                    maxHeight: string;
                    height?: undefined;
                } | {
                    height?: undefined;
                    maxHeight?: undefined;
                }>;
                scrollBarRef: Ref<any>;
                scrollTo: (options: number | ScrollToOptions, yCoord?: number | undefined) => void;
                setScrollLeft: (left?: number | undefined) => void;
                setScrollTop: (top?: number | undefined) => void;
            }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("select" | "select-all" | "selection-change" | "cell-mouse-enter" | "cell-mouse-leave" | "cell-contextmenu" | "row-click" | "row-contextmenu" | "row-dblclick" | "header-click" | "header-contextmenu" | "sort-change" | "filter-change" | "current-change" | "header-dragend" | "expand-change" | "cell-click" | "cell-dblclick")[], VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
                data: {
                    type: PropType<any[]>;
                    default: () => never[];
                };
                size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                width: (NumberConstructor | StringConstructor)[];
                height: (NumberConstructor | StringConstructor)[];
                maxHeight: (NumberConstructor | StringConstructor)[];
                fit: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                stripe: BooleanConstructor;
                border: BooleanConstructor;
                rowKey: PropType<string | ((row: any) => string) | undefined>;
                showHeader: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showSummary: BooleanConstructor;
                sumText: StringConstructor;
                summaryMethod: PropType< SummaryMethod<any> | undefined>;
                rowClassName: PropType< ColumnCls<any> | undefined>;
                rowStyle: PropType< ColumnStyle<any> | undefined>;
                cellClassName: PropType< CellCls<any> | undefined>;
                cellStyle: PropType< CellStyle<any> | undefined>;
                headerRowClassName: PropType< ColumnCls<any> | undefined>;
                headerRowStyle: PropType< ColumnStyle<any> | undefined>;
                headerCellClassName: PropType< CellCls<any> | undefined>;
                headerCellStyle: PropType< CellStyle<any> | undefined>;
                highlightCurrentRow: BooleanConstructor;
                currentRowKey: (NumberConstructor | StringConstructor)[];
                emptyText: StringConstructor;
                expandRowKeys: PropType<any[] | undefined>;
                defaultExpandAll: BooleanConstructor;
                defaultSort: PropType< Sort | undefined>;
                tooltipEffect: StringConstructor;
                tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
                spanMethod: PropType<((data: {
                    row: any;
                    rowIndex: number;
                    column: TableColumnCtx<any>;
                    columnIndex: number;
                }) => number[] | {
                    rowspan: number;
                    colspan: number;
                } | undefined) | undefined>;
                selectOnIndeterminate: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                indent: {
                    type: NumberConstructor;
                    default: number;
                };
                treeProps: {
                    type: PropType<{
                        hasChildren?: string | undefined;
                        children?: string | undefined;
                    } | undefined>;
                    default: () => {
                        hasChildren: string;
                        children: string;
                    };
                };
                lazy: BooleanConstructor;
                load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
                style: {
                    type: PropType<CSSProperties>;
                    default: () => {};
                };
                className: {
                    type: StringConstructor;
                    default: string;
                };
                tableLayout: {
                    type: PropType<"fixed" | "auto">;
                    default: string;
                };
                scrollbarAlwaysOn: BooleanConstructor;
                flexible: BooleanConstructor;
                showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            }>> & {
                onSelect?: ((...args: any[]) => any) | undefined;
                "onExpand-change"?: ((...args: any[]) => any) | undefined;
                "onCurrent-change"?: ((...args: any[]) => any) | undefined;
                "onSelect-all"?: ((...args: any[]) => any) | undefined;
                "onSelection-change"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
                "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onCell-click"?: ((...args: any[]) => any) | undefined;
                "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
                "onRow-click"?: ((...args: any[]) => any) | undefined;
                "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
                "onHeader-click"?: ((...args: any[]) => any) | undefined;
                "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onSort-change"?: ((...args: any[]) => any) | undefined;
                "onFilter-change"?: ((...args: any[]) => any) | undefined;
                "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
            }, {
                style: CSSProperties;
                className: string;
                tableLayout: "fixed" | "auto";
                border: boolean;
                data: any[];
                fit: boolean;
                lazy: boolean;
                scrollbarAlwaysOn: boolean;
                stripe: boolean;
                treeProps: {
                    hasChildren?: string | undefined;
                    children?: string | undefined;
                } | undefined;
                showHeader: boolean;
                showSummary: boolean;
                highlightCurrentRow: boolean;
                defaultExpandAll: boolean;
                selectOnIndeterminate: boolean;
                indent: number;
                flexible: boolean;
            }, true, {}, {}, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly< ExtractPropTypes<{
                data: {
                    type: PropType<any[]>;
                    default: () => never[];
                };
                size: {
                    readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                    readonly required: false;
                    readonly validator: ((val: unknown) => boolean) | undefined;
                    __epPropKey: true;
                };
                width: (NumberConstructor | StringConstructor)[];
                height: (NumberConstructor | StringConstructor)[];
                maxHeight: (NumberConstructor | StringConstructor)[];
                fit: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                stripe: BooleanConstructor;
                border: BooleanConstructor;
                rowKey: PropType<string | ((row: any) => string) | undefined>;
                showHeader: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                showSummary: BooleanConstructor;
                sumText: StringConstructor;
                summaryMethod: PropType< SummaryMethod<any> | undefined>;
                rowClassName: PropType< ColumnCls<any> | undefined>;
                rowStyle: PropType< ColumnStyle<any> | undefined>;
                cellClassName: PropType< CellCls<any> | undefined>;
                cellStyle: PropType< CellStyle<any> | undefined>;
                headerRowClassName: PropType< ColumnCls<any> | undefined>;
                headerRowStyle: PropType< ColumnStyle<any> | undefined>;
                headerCellClassName: PropType< CellCls<any> | undefined>;
                headerCellStyle: PropType< CellStyle<any> | undefined>;
                highlightCurrentRow: BooleanConstructor;
                currentRowKey: (NumberConstructor | StringConstructor)[];
                emptyText: StringConstructor;
                expandRowKeys: PropType<any[] | undefined>;
                defaultExpandAll: BooleanConstructor;
                defaultSort: PropType< Sort | undefined>;
                tooltipEffect: StringConstructor;
                tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
                spanMethod: PropType<((data: {
                    row: any;
                    rowIndex: number;
                    column: TableColumnCtx<any>;
                    columnIndex: number;
                }) => number[] | {
                    rowspan: number;
                    colspan: number;
                } | undefined) | undefined>;
                selectOnIndeterminate: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                indent: {
                    type: NumberConstructor;
                    default: number;
                };
                treeProps: {
                    type: PropType<{
                        hasChildren?: string | undefined;
                        children?: string | undefined;
                    } | undefined>;
                    default: () => {
                        hasChildren: string;
                        children: string;
                    };
                };
                lazy: BooleanConstructor;
                load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
                style: {
                    type: PropType<CSSProperties>;
                    default: () => {};
                };
                className: {
                    type: StringConstructor;
                    default: string;
                };
                tableLayout: {
                    type: PropType<"fixed" | "auto">;
                    default: string;
                };
                scrollbarAlwaysOn: BooleanConstructor;
                flexible: BooleanConstructor;
                showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            }>> & {
                onSelect?: ((...args: any[]) => any) | undefined;
                "onExpand-change"?: ((...args: any[]) => any) | undefined;
                "onCurrent-change"?: ((...args: any[]) => any) | undefined;
                "onSelect-all"?: ((...args: any[]) => any) | undefined;
                "onSelection-change"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
                "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
                "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onCell-click"?: ((...args: any[]) => any) | undefined;
                "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
                "onRow-click"?: ((...args: any[]) => any) | undefined;
                "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
                "onHeader-click"?: ((...args: any[]) => any) | undefined;
                "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
                "onSort-change"?: ((...args: any[]) => any) | undefined;
                "onFilter-change"?: ((...args: any[]) => any) | undefined;
                "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
            }, {
                ns: {
                    namespace: ComputedRef<string>;
                    b: (blockSuffix?: string | undefined) => string;
                    e: (element?: string | undefined) => string;
                    m: (modifier?: string | undefined) => string;
                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                    is: {
                        (name: string, state: boolean | undefined): string;
                        (name: string): string;
                    };
                    cssVar: (object: Record<string, string>) => Record<string, string>;
                    cssVarName: (name: string) => string;
                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                    cssVarBlockName: (name: string) => string;
                };
                layout: __DTS_DEFAULT_0__<any>;
                store: any;
                handleHeaderFooterMousewheel: (event: any, data: any) => void;
                handleMouseLeave: () => void;
                tableId: string;
                tableSize: ComputedRef<"" | "default" | "small" | "large">;
                isHidden: Ref<boolean>;
                isEmpty: ComputedRef<boolean>;
                renderExpanded: Ref<null>;
                resizeProxyVisible: Ref<boolean>;
                resizeState: Ref<{
                    width: number | null;
                    height: number | null;
                    headerHeight: number | null;
                }>;
                isGroup: Ref<boolean>;
                bodyWidth: ComputedRef<string>;
                tableBodyStyles: ComputedRef<{
                    width: string;
                }>;
                emptyBlockStyle: ComputedRef<{
                    width: string;
                    height: string;
                } | null>;
                debouncedUpdateLayout: DebouncedFunc<() => void>;
                handleFixedMousewheel: (event: any, data: any) => void;
                /**
                 * 获取搜索的值
                 * @version v0.1.17
                 */
                setCurrentRow: (row: any) => void;
                getSelectionRows: () => any;
                toggleRowSelection: (row: any, selected: boolean) => void;
                clearSelection: () => void;
                clearFilter: (columnKeys?: string[] | undefined) => void;
                toggleAllSelection: () => void;
                toggleRowExpansion: (row: any, expanded?: boolean | undefined) => void;
                clearSort: () => void;
                doLayout: () => void;
                sort: (prop: string, order: string) => void;
                t: Translator;
                setDragVisible: (visible: boolean) => void;
                context: Table<any>;
                computedSumText: ComputedRef<string>;
                computedEmptyText: ComputedRef<string>;
                tableLayout: ComputedRef<"fixed" | "auto" | undefined>;
                scrollbarViewStyle: {
                    display: string;
                    verticalAlign: string;
                };
                tableInnerStyle: ComputedRef<{
                    height: string | number;
                    maxHeight?: undefined;
                } | {
                    maxHeight: string | number;
                    height?: undefined;
                } | {
                    height?: undefined;
                    maxHeight?: undefined;
                }>;
                scrollbarStyle: ComputedRef<{
                    height: string;
                    maxHeight?: undefined;
                } | {
                    maxHeight: string;
                    height?: undefined;
                } | {
                    height?: undefined;
                    maxHeight?: undefined;
                }>;
                scrollBarRef: Ref<any>;
                scrollTo: (options: number | ScrollToOptions, yCoord?: number | undefined) => void;
                setScrollLeft: (left?: number | undefined) => void;
                setScrollTop: (top?: number | undefined) => void;
            }, {}, {}, {}, {
                style: CSSProperties;
                className: string;
                tableLayout: "fixed" | "auto";
                border: boolean;
                data: any[];
                fit: boolean;
                lazy: boolean;
                scrollbarAlwaysOn: boolean;
                stripe: boolean;
                treeProps: {
                    hasChildren?: string | undefined;
                    children?: string | undefined;
                } | undefined;
                showHeader: boolean;
                showSummary: boolean;
                highlightCurrentRow: boolean;
                defaultExpandAll: boolean;
                selectOnIndeterminate: boolean;
                indent: number;
                flexible: boolean;
            }> | null>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
            paginationChange: (pageInfo: PageInfo) => void;
            clickAction: (data: ButtonsCallBackParams) => void;
            clickActionConfirmCancel: (data: ButtonsCallBackParams) => void;
            dragSortEnd: (newIndex: number, oldIndex: number) => void;
            formChange: (data: FormChangeCallBackParams) => void;
            refresh: () => void;
            edited: () => void;
            "cell-click": (row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => void;
            "cell-dblclick": (row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => void;
        }, string, {
            columns: PlusColumn[];
            headerCellStyle: Partial< CSSProperties> | Partial<(data: {
                row: any[];
                rowIndex: number;
                column: TableColumnCtx<any[]>;
                columnIndex: number;
            }) => CSSProperties>;
            rowKey: string | ((row: any[]) => string);
            tableData: RecordType[];
            data: RecordType[];
            defaultSize: "" | "default" | "small" | "large";
            pagination: false | Partial<PlusPaginationProps>;
            actionBar: false | Partial< ActionBarProps>;
            hasIndexColumn: boolean;
            titleBar: boolean | Partial<Partial<{
                title?: string | undefined;
                refresh?: boolean | undefined;
                density?: boolean | undefined;
                columnSetting?: boolean | ColumnSetting | undefined;
                icon?: {
                    size?: string | undefined;
                    color?: string | undefined;
                } | undefined;
            }>>;
            isSelection: boolean;
            hasExpand: boolean;
            loadingStatus: boolean;
            dragSortable: false | Partial< Options>;
            dragSortableTableColumnProps: Partial< TableColumnCtx<any>>;
            indexTableColumnProps: Partial< TableColumnCtx<any>>;
            selectionTableColumnProps: Partial< TableColumnCtx<any>>;
            expandTableColumnProps: Partial< TableColumnCtx<any>>;
            indexContentStyle: Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>);
            editable: boolean | "click" | "dblclick";
            adaptive: boolean | {
                offsetBottom?: number | undefined;
                timeout?: number | undefined;
            };
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle;
    } & Omit<Readonly< ExtractPropTypes<{
        columns: {
            type: PropType<PlusColumn[]>;
            default: () => never[];
        };
        height: {
            type: PropType<string | number>;
        };
        headerCellStyle: {
            type: PropType<Partial< CSSProperties> | Partial<(data: {
                row: any[];
                rowIndex: number;
                column: TableColumnCtx<any[]>;
                columnIndex: number;
            }) => CSSProperties>>;
            default: () => {
                'background-color': string;
            };
        };
        rowKey: {
            type: PropType<string | ((row: any[]) => string)>;
            default: string;
        };
        tableData: {
            type: PropType<RecordType[]>;
            default: () => never[];
        };
        data: {
            type: PropType<RecordType[]>;
            default: () => never[];
        };
        defaultSize: {
            type: PropType<"" | "default" | "small" | "large">;
            default: string;
        };
        pagination: {
            type: PropType<false | Partial<PlusPaginationProps>>;
            default: boolean;
        };
        actionBar: {
            type: PropType<false | Partial< ActionBarProps>>;
            default: boolean;
        };
        hasIndexColumn: {
            type: PropType<boolean>;
            default: boolean;
        };
        titleBar: {
            type: PropType<boolean | Partial<Partial<{
                title?: string | undefined;
                refresh?: boolean | undefined;
                density?: boolean | undefined;
                columnSetting?: boolean | ColumnSetting | undefined;
                icon?: {
                    size?: string | undefined;
                    color?: string | undefined;
                } | undefined;
            }>>>;
            default: boolean;
        };
        isSelection: {
            type: PropType<boolean>;
            default: boolean;
        };
        hasExpand: {
            type: PropType<boolean>;
            default: boolean;
        };
        loadingStatus: {
            type: PropType<boolean>;
            default: boolean;
        };
        dragSortable: {
            type: PropType<false | Partial< Options>>;
            default: boolean;
        };
        dragSortableTableColumnProps: {
            type: PropType<Partial< TableColumnCtx<any>>>;
            default: () => {};
        };
        indexTableColumnProps: {
            type: PropType<Partial< TableColumnCtx<any>>>;
            default: () => {};
        };
        selectionTableColumnProps: {
            type: PropType<Partial< TableColumnCtx<any>>>;
            default: () => {
                width: number;
            };
        };
        expandTableColumnProps: {
            type: PropType<Partial< TableColumnCtx<any>>>;
            default: () => {};
        };
        indexContentStyle: {
            type: PropType<Partial< CSSProperties> | ((row: RecordType, index: number) => Partial< CSSProperties>)>;
            default: () => {};
        };
        editable: {
            type: PropType<boolean | "click" | "dblclick">;
            default: boolean;
        };
        adaptive: {
            type: PropType<boolean | {
                offsetBottom?: number | undefined;
                timeout?: number | undefined;
            }>;
            default: boolean;
        };
    }>> & {
        onRefresh?: (() => any) | undefined;
        onPaginationChange?: ((pageInfo: PageInfo) => any) | undefined;
        onClickAction?: ((data: ButtonsCallBackParams) => any) | undefined;
        onClickActionConfirmCancel?: ((data: ButtonsCallBackParams) => any) | undefined;
        onDragSortEnd?: ((newIndex: number, oldIndex: number) => any) | undefined;
        onFormChange?: ((data: FormChangeCallBackParams) => any) | undefined;
        onEdited?: (() => any) | undefined;
        "onCell-click"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
        "onCell-dblclick"?: ((row: RecordType, column: PlusColumn, cell: HTMLTableCellElement, event: Event) => any) | undefined;
    }, "formRefs" | "tableInstance"> & ShallowUnwrapRef<{
        formRefs: ShallowRef<Record<string | number, TableFormRefRow[]>>;
        tableInstance: ShallowRef< CreateComponentPublicInstance<Readonly< ExtractPropTypes<{
            data: {
                type: PropType<any[]>;
                default: () => never[];
            };
            size: {
                readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __epPropKey: true;
            };
            width: (NumberConstructor | StringConstructor)[];
            height: (NumberConstructor | StringConstructor)[];
            maxHeight: (NumberConstructor | StringConstructor)[];
            fit: {
                type: BooleanConstructor;
                default: boolean;
            };
            stripe: BooleanConstructor;
            border: BooleanConstructor;
            rowKey: PropType<string | ((row: any) => string) | undefined>;
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSummary: BooleanConstructor;
            sumText: StringConstructor;
            summaryMethod: PropType< SummaryMethod<any> | undefined>;
            rowClassName: PropType< ColumnCls<any> | undefined>;
            rowStyle: PropType< ColumnStyle<any> | undefined>;
            cellClassName: PropType< CellCls<any> | undefined>;
            cellStyle: PropType< CellStyle<any> | undefined>;
            headerRowClassName: PropType< ColumnCls<any> | undefined>;
            headerRowStyle: PropType< ColumnStyle<any> | undefined>;
            headerCellClassName: PropType< CellCls<any> | undefined>;
            headerCellStyle: PropType< CellStyle<any> | undefined>;
            highlightCurrentRow: BooleanConstructor;
            currentRowKey: (NumberConstructor | StringConstructor)[];
            emptyText: StringConstructor;
            expandRowKeys: PropType<any[] | undefined>;
            defaultExpandAll: BooleanConstructor;
            defaultSort: PropType< Sort | undefined>;
            tooltipEffect: StringConstructor;
            tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            spanMethod: PropType<((data: {
                row: any;
                rowIndex: number;
                column: TableColumnCtx<any>;
                columnIndex: number;
            }) => number[] | {
                rowspan: number;
                colspan: number;
            } | undefined) | undefined>;
            selectOnIndeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indent: {
                type: NumberConstructor;
                default: number;
            };
            treeProps: {
                type: PropType<{
                    hasChildren?: string | undefined;
                    children?: string | undefined;
                } | undefined>;
                default: () => {
                    hasChildren: string;
                    children: string;
                };
            };
            lazy: BooleanConstructor;
            load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
            style: {
                type: PropType<CSSProperties>;
                default: () => {};
            };
            className: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: PropType<"fixed" | "auto">;
                default: string;
            };
            scrollbarAlwaysOn: BooleanConstructor;
            flexible: BooleanConstructor;
            showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onExpand-change"?: ((...args: any[]) => any) | undefined;
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onSelect-all"?: ((...args: any[]) => any) | undefined;
            "onSelection-change"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
            "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onCell-click"?: ((...args: any[]) => any) | undefined;
            "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
            "onRow-click"?: ((...args: any[]) => any) | undefined;
            "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
            "onHeader-click"?: ((...args: any[]) => any) | undefined;
            "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onSort-change"?: ((...args: any[]) => any) | undefined;
            "onFilter-change"?: ((...args: any[]) => any) | undefined;
            "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
        }, {
            ns: {
                namespace: ComputedRef<string>;
                b: (blockSuffix?: string | undefined) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            layout: __DTS_DEFAULT_0__<any>;
            store: any;
            handleHeaderFooterMousewheel: (event: any, data: any) => void;
            handleMouseLeave: () => void;
            tableId: string;
            tableSize: ComputedRef<"" | "default" | "small" | "large">;
            isHidden: Ref<boolean>;
            isEmpty: ComputedRef<boolean>;
            renderExpanded: Ref<null>;
            resizeProxyVisible: Ref<boolean>;
            resizeState: Ref<{
                width: number | null;
                height: number | null;
                headerHeight: number | null;
            }>;
            isGroup: Ref<boolean>;
            bodyWidth: ComputedRef<string>;
            tableBodyStyles: ComputedRef<{
                width: string;
            }>;
            emptyBlockStyle: ComputedRef<{
                width: string;
                height: string;
            } | null>;
            debouncedUpdateLayout: DebouncedFunc<() => void>;
            handleFixedMousewheel: (event: any, data: any) => void;
            /**
             * 获取搜索的值
             * @version v0.1.17
             */
            setCurrentRow: (row: any) => void;
            getSelectionRows: () => any;
            toggleRowSelection: (row: any, selected: boolean) => void;
            clearSelection: () => void;
            clearFilter: (columnKeys?: string[] | undefined) => void;
            toggleAllSelection: () => void;
            toggleRowExpansion: (row: any, expanded?: boolean | undefined) => void;
            clearSort: () => void;
            doLayout: () => void;
            sort: (prop: string, order: string) => void;
            t: Translator;
            setDragVisible: (visible: boolean) => void;
            context: Table<any>;
            computedSumText: ComputedRef<string>;
            computedEmptyText: ComputedRef<string>;
            tableLayout: ComputedRef<"fixed" | "auto" | undefined>;
            scrollbarViewStyle: {
                display: string;
                verticalAlign: string;
            };
            tableInnerStyle: ComputedRef<{
                height: string | number;
                maxHeight?: undefined;
            } | {
                maxHeight: string | number;
                height?: undefined;
            } | {
                height?: undefined;
                maxHeight?: undefined;
            }>;
            scrollbarStyle: ComputedRef<{
                height: string;
                maxHeight?: undefined;
            } | {
                maxHeight: string;
                height?: undefined;
            } | {
                height?: undefined;
                maxHeight?: undefined;
            }>;
            scrollBarRef: Ref<any>;
            scrollTo: (options: number | ScrollToOptions, yCoord?: number | undefined) => void;
            setScrollLeft: (left?: number | undefined) => void;
            setScrollTop: (top?: number | undefined) => void;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("select" | "select-all" | "selection-change" | "cell-mouse-enter" | "cell-mouse-leave" | "cell-contextmenu" | "row-click" | "row-contextmenu" | "row-dblclick" | "header-click" | "header-contextmenu" | "sort-change" | "filter-change" | "current-change" | "header-dragend" | "expand-change" | "cell-click" | "cell-dblclick")[], VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly< ExtractPropTypes<{
            data: {
                type: PropType<any[]>;
                default: () => never[];
            };
            size: {
                readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __epPropKey: true;
            };
            width: (NumberConstructor | StringConstructor)[];
            height: (NumberConstructor | StringConstructor)[];
            maxHeight: (NumberConstructor | StringConstructor)[];
            fit: {
                type: BooleanConstructor;
                default: boolean;
            };
            stripe: BooleanConstructor;
            border: BooleanConstructor;
            rowKey: PropType<string | ((row: any) => string) | undefined>;
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSummary: BooleanConstructor;
            sumText: StringConstructor;
            summaryMethod: PropType< SummaryMethod<any> | undefined>;
            rowClassName: PropType< ColumnCls<any> | undefined>;
            rowStyle: PropType< ColumnStyle<any> | undefined>;
            cellClassName: PropType< CellCls<any> | undefined>;
            cellStyle: PropType< CellStyle<any> | undefined>;
            headerRowClassName: PropType< ColumnCls<any> | undefined>;
            headerRowStyle: PropType< ColumnStyle<any> | undefined>;
            headerCellClassName: PropType< CellCls<any> | undefined>;
            headerCellStyle: PropType< CellStyle<any> | undefined>;
            highlightCurrentRow: BooleanConstructor;
            currentRowKey: (NumberConstructor | StringConstructor)[];
            emptyText: StringConstructor;
            expandRowKeys: PropType<any[] | undefined>;
            defaultExpandAll: BooleanConstructor;
            defaultSort: PropType< Sort | undefined>;
            tooltipEffect: StringConstructor;
            tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            spanMethod: PropType<((data: {
                row: any;
                rowIndex: number;
                column: TableColumnCtx<any>;
                columnIndex: number;
            }) => number[] | {
                rowspan: number;
                colspan: number;
            } | undefined) | undefined>;
            selectOnIndeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indent: {
                type: NumberConstructor;
                default: number;
            };
            treeProps: {
                type: PropType<{
                    hasChildren?: string | undefined;
                    children?: string | undefined;
                } | undefined>;
                default: () => {
                    hasChildren: string;
                    children: string;
                };
            };
            lazy: BooleanConstructor;
            load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
            style: {
                type: PropType<CSSProperties>;
                default: () => {};
            };
            className: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: PropType<"fixed" | "auto">;
                default: string;
            };
            scrollbarAlwaysOn: BooleanConstructor;
            flexible: BooleanConstructor;
            showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onExpand-change"?: ((...args: any[]) => any) | undefined;
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onSelect-all"?: ((...args: any[]) => any) | undefined;
            "onSelection-change"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
            "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onCell-click"?: ((...args: any[]) => any) | undefined;
            "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
            "onRow-click"?: ((...args: any[]) => any) | undefined;
            "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
            "onHeader-click"?: ((...args: any[]) => any) | undefined;
            "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onSort-change"?: ((...args: any[]) => any) | undefined;
            "onFilter-change"?: ((...args: any[]) => any) | undefined;
            "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
        }, {
            style: CSSProperties;
            className: string;
            tableLayout: "fixed" | "auto";
            border: boolean;
            data: any[];
            fit: boolean;
            lazy: boolean;
            scrollbarAlwaysOn: boolean;
            stripe: boolean;
            treeProps: {
                hasChildren?: string | undefined;
                children?: string | undefined;
            } | undefined;
            showHeader: boolean;
            showSummary: boolean;
            highlightCurrentRow: boolean;
            defaultExpandAll: boolean;
            selectOnIndeterminate: boolean;
            indent: number;
            flexible: boolean;
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly< ExtractPropTypes<{
            data: {
                type: PropType<any[]>;
                default: () => never[];
            };
            size: {
                readonly type: PropType<EpPropMergeType<StringConstructor, "" | "default" | "small" | "large", never>>;
                readonly required: false;
                readonly validator: ((val: unknown) => boolean) | undefined;
                __epPropKey: true;
            };
            width: (NumberConstructor | StringConstructor)[];
            height: (NumberConstructor | StringConstructor)[];
            maxHeight: (NumberConstructor | StringConstructor)[];
            fit: {
                type: BooleanConstructor;
                default: boolean;
            };
            stripe: BooleanConstructor;
            border: BooleanConstructor;
            rowKey: PropType<string | ((row: any) => string) | undefined>;
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSummary: BooleanConstructor;
            sumText: StringConstructor;
            summaryMethod: PropType< SummaryMethod<any> | undefined>;
            rowClassName: PropType< ColumnCls<any> | undefined>;
            rowStyle: PropType< ColumnStyle<any> | undefined>;
            cellClassName: PropType< CellCls<any> | undefined>;
            cellStyle: PropType< CellStyle<any> | undefined>;
            headerRowClassName: PropType< ColumnCls<any> | undefined>;
            headerRowStyle: PropType< ColumnStyle<any> | undefined>;
            headerCellClassName: PropType< CellCls<any> | undefined>;
            headerCellStyle: PropType< CellStyle<any> | undefined>;
            highlightCurrentRow: BooleanConstructor;
            currentRowKey: (NumberConstructor | StringConstructor)[];
            emptyText: StringConstructor;
            expandRowKeys: PropType<any[] | undefined>;
            defaultExpandAll: BooleanConstructor;
            defaultSort: PropType< Sort | undefined>;
            tooltipEffect: StringConstructor;
            tooltipOptions: PropType<Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            spanMethod: PropType<((data: {
                row: any;
                rowIndex: number;
                column: TableColumnCtx<any>;
                columnIndex: number;
            }) => number[] | {
                rowspan: number;
                colspan: number;
            } | undefined) | undefined>;
            selectOnIndeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indent: {
                type: NumberConstructor;
                default: number;
            };
            treeProps: {
                type: PropType<{
                    hasChildren?: string | undefined;
                    children?: string | undefined;
                } | undefined>;
                default: () => {
                    hasChildren: string;
                    children: string;
                };
            };
            lazy: BooleanConstructor;
            load: PropType<((row: any, treeNode: TreeNode, resolve: (data: any[]) => void) => void) | undefined>;
            style: {
                type: PropType<CSSProperties>;
                default: () => {};
            };
            className: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: PropType<"fixed" | "auto">;
                default: string;
            };
            scrollbarAlwaysOn: BooleanConstructor;
            flexible: BooleanConstructor;
            showOverflowTooltip: PropType<boolean | Partial<Pick< ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onExpand-change"?: ((...args: any[]) => any) | undefined;
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onSelect-all"?: ((...args: any[]) => any) | undefined;
            "onSelection-change"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-enter"?: ((...args: any[]) => any) | undefined;
            "onCell-mouse-leave"?: ((...args: any[]) => any) | undefined;
            "onCell-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onCell-click"?: ((...args: any[]) => any) | undefined;
            "onCell-dblclick"?: ((...args: any[]) => any) | undefined;
            "onRow-click"?: ((...args: any[]) => any) | undefined;
            "onRow-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onRow-dblclick"?: ((...args: any[]) => any) | undefined;
            "onHeader-click"?: ((...args: any[]) => any) | undefined;
            "onHeader-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onSort-change"?: ((...args: any[]) => any) | undefined;
            "onFilter-change"?: ((...args: any[]) => any) | undefined;
            "onHeader-dragend"?: ((...args: any[]) => any) | undefined;
        }, {
            ns: {
                namespace: ComputedRef<string>;
                b: (blockSuffix?: string | undefined) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            layout: __DTS_DEFAULT_0__<any>;
            store: any;
            handleHeaderFooterMousewheel: (event: any, data: any) => void;
            handleMouseLeave: () => void;
            tableId: string;
            tableSize: ComputedRef<"" | "default" | "small" | "large">;
            isHidden: Ref<boolean>;
            isEmpty: ComputedRef<boolean>;
            renderExpanded: Ref<null>;
            resizeProxyVisible: Ref<boolean>;
            resizeState: Ref<{
                width: number | null;
                height: number | null;
                headerHeight: number | null;
            }>;
            isGroup: Ref<boolean>;
            bodyWidth: ComputedRef<string>;
            tableBodyStyles: ComputedRef<{
                width: string;
            }>;
            emptyBlockStyle: ComputedRef<{
                width: string;
                height: string;
            } | null>;
            debouncedUpdateLayout: DebouncedFunc<() => void>;
            handleFixedMousewheel: (event: any, data: any) => void;
            /**
             * 获取搜索的值
             * @version v0.1.17
             */
            setCurrentRow: (row: any) => void;
            getSelectionRows: () => any;
            toggleRowSelection: (row: any, selected: boolean) => void;
            clearSelection: () => void;
            clearFilter: (columnKeys?: string[] | undefined) => void;
            toggleAllSelection: () => void;
            toggleRowExpansion: (row: any, expanded?: boolean | undefined) => void;
            clearSort: () => void;
            doLayout: () => void;
            sort: (prop: string, order: string) => void;
            t: Translator;
            setDragVisible: (visible: boolean) => void;
            context: Table<any>;
            computedSumText: ComputedRef<string>;
            computedEmptyText: ComputedRef<string>;
            tableLayout: ComputedRef<"fixed" | "auto" | undefined>;
            scrollbarViewStyle: {
                display: string;
                verticalAlign: string;
            };
            tableInnerStyle: ComputedRef<{
                height: string | number;
                maxHeight?: undefined;
            } | {
                maxHeight: string | number;
                height?: undefined;
            } | {
                height?: undefined;
                maxHeight?: undefined;
            }>;
            scrollbarStyle: ComputedRef<{
                height: string;
                maxHeight?: undefined;
            } | {
                maxHeight: string;
                height?: undefined;
            } | {
                height?: undefined;
                maxHeight?: undefined;
            }>;
            scrollBarRef: Ref<any>;
            scrollTo: (options: number | ScrollToOptions, yCoord?: number | undefined) => void;
            setScrollLeft: (left?: number | undefined) => void;
            setScrollTop: (top?: number | undefined) => void;
        }, {}, {}, {}, {
            style: CSSProperties;
            className: string;
            tableLayout: "fixed" | "auto";
            border: boolean;
            data: any[];
            fit: boolean;
            lazy: boolean;
            scrollbarAlwaysOn: boolean;
            stripe: boolean;
            treeProps: {
                hasChildren?: string | undefined;
                children?: string | undefined;
            } | undefined;
            showHeader: boolean;
            showSummary: boolean;
            highlightCurrentRow: boolean;
            defaultExpandAll: boolean;
            selectOnIndeterminate: boolean;
            indent: number;
            flexible: boolean;
        }> | null>;
    }> & {} & ComponentCustomProperties & {} & {
        $slots: Partial<Record<NonNullable<string | number>, (_: {
            column: any;
            prop: string;
            valueType: TableValueType | FormItemValueType;
            row: RecordType;
            index: number;
            rowIndex: number;
            fieldProps: RecordType;
            options: OptionsRow<undefined>[];
            value: any;
        }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
            column: any;
            prop: string;
            valueType: TableValueType | FormItemValueType;
            row: RecordType;
            index: number;
            rowIndex: number;
            fieldProps: RecordType;
            options: OptionsRow<undefined>[];
            value: any;
        }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
            column: any;
            prop: string;
            valueType: TableValueType | FormItemValueType;
            row: RecordType;
            index: number;
            rowIndex: number;
            fieldProps: RecordType;
            options: OptionsRow<undefined>[];
            value: any;
        }) => any>> & Partial<Record<NonNullable<string | number>, (_: {
            column: any;
            prop: string;
            valueType: TableValueType | FormItemValueType;
            row: RecordType;
            index: number;
            rowIndex: number;
            fieldProps: RecordType;
            options: OptionsRow<undefined>[];
            value: any;
        }) => any>> & {
            title?(_: {}): any;
            toolbar?(_: {}): any;
            "drag-sort-icon"?(_: {}): any;
            "column-settings-icon"?(_: {}): any;
            "density-icon"?(_: {}): any;
            default?(_: {}): any;
            expand?(_: any): any;
            "tooltip-icon"?(_: {}): any;
            "edit-icon"?(_: {}): any;
            "action-bar-more-icon"?(_: {}): any;
            append?(_: {}): any;
            empty?(_: {}): any;
            "pagination-left"?(_: {}): any;
            "pagination-right"?(_: {}): any;
        };
    }) | null>;
    getList: () => Promise<void>;
    handleReset: (val: FieldValues) => void;
    /**
     * TODO: 将会在v0.2.0中移除
     */
    handleRest: (val: FieldValues) => void;
    setSearchFieldsValue: (val: RecordType) => void;
    getSearchFieldsValue: (key?: string | number | symbol | undefined) => FieldValueType;
    clearSearchFieldsValue: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    search: (data: FieldValues) => void;
    reset: (data: FieldValues) => void;
    paginationChange: (pageInfo: PageInfo) => void;
    requestError: (error: unknown) => void;
    requestComplete: (tableData: RecordType[]) => void;
}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PlusPageProps>, {
    params: () => {};
    columns: () => never[];
    postData: undefined;
    beforeSearchSubmit: undefined;
    isCard: boolean;
    search: () => {};
    table: () => {};
    defaultPageInfo: () => {
        page: number;
        pageSize: number;
    };
    defaultPageSizeList: () => number[];
    searchCardProps: () => {};
    tableCardProps: () => {};
    /**
     * 分页组件的其他参数，不包含total，modelValue，pageSizeList
     */
    pagination: () => {};
    immediate: boolean;
    dividerProps: boolean;
    pageInfoMap: () => {
        page: string;
        pageSize: string;
    };
}>>> & {
    onPaginationChange?: ((pageInfo: PageInfo) => any) | undefined;
    onReset?: ((data: FieldValues) => any) | undefined;
    onSearch?: ((data: FieldValues) => any) | undefined;
    onRequestError?: ((error: unknown) => any) | undefined;
    onRequestComplete?: ((tableData: RecordType[]) => any) | undefined;
}, {
    columns: PlusColumn[];
    search: false | Partial<PlusSearchProps>;
    immediate: boolean;
    pagination: false | Omit<PlusPaginationProps, "total" | "modelValue" | "pageSizeList">;
    params: RecordType;
    table: Partial<PlusTableProps>;
    postData: <T_1 = RecordType[]>(data: T_1[]) => T_1[];
    beforeSearchSubmit: <T_2 = RecordType>(params: T_2) => T_2;
    isCard: boolean;
    searchCardProps: Partial<Mutable<CardProps>>;
    tableCardProps: Partial<Mutable<CardProps>>;
    defaultPageInfo: PageInfo;
    defaultPageSizeList: number[];
    dividerProps: false | Partial<RecordType>;
    pageInfoMap: {
        page?: string | undefined;
        pageSize?: string | undefined;
    };
}, {}>, Partial<Record<NonNullable<string | number>, (_: {
    column: any;
    prop: string;
    valueType: TableValueType | FormItemValueType;
    row: RecordType;
    index: number;
    rowIndex: number;
    fieldProps: RecordType;
    options: OptionsRow<undefined>[];
    value: any;
}) => any>> & Partial<Record<NonNullable<string | number>, (_: {
    column: any;
    prop: string;
    valueType: TableValueType | FormItemValueType;
    row: RecordType;
    index: number;
    rowIndex: number;
    fieldProps: RecordType;
    options: OptionsRow<undefined>[];
    value: any;
}) => any>> & Partial<Record<NonNullable<string | number>, (_: {
    column: any;
    prop: string;
    valueType: TableValueType | FormItemValueType;
    row: RecordType;
    index: number;
    rowIndex: number;
    fieldProps: RecordType;
    options: OptionsRow<undefined>[];
    value: any;
}) => any>> & {
    "search-footer"?(_: {
        isShowUnfold: boolean;
        handleReset: () => void;
        handleSearch: () => void;
        handleUnfold: (e: MouseEvent) => void;
    }): any;
    extra?(_: {}): any;
    "table-title"?(_: {}): any;
    "table-toolbar"?(_: {}): any;
    "table-expand"?(_: any): any;
    "table-append"?(_: {}): any;
    "table-empty"?(_: {}): any;
    "pagination-left"?(_: {}): any;
    "pagination-right"?(_: {}): any;
    "drag-sort-icon"?(_: {}): any;
    "column-settings-icon"?(_: {}): any;
    "density-icon"?(_: {}): any;
    "tooltip-icon"?(_: {}): any;
    "action-bar-more-icon"?(_: {}): any;
    "edit-icon"?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
